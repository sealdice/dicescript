// Code generated by pigeon; DO NOT EDIT.

//nolint:unreachable
package dicescript

import (
	"bytes"
	"errors"
	"fmt"
	"math"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

type ParserCustomData struct {
	ParserData
}

func toStr(x []byte) string {
	return string(x)
}

func stringsJoin(items any) string {
	var buf bytes.Buffer
	for _, i := range items.([]any) {
		buf.Write(i.([]byte))
	}
	return buf.String()
}

var g = &grammar{
	rules: []*rule{
		{
			name: "dicescript",
			expr: &actionExpr{
				run: (*parser).call_ondicescript_1,
				expr: &seqExpr{
					exprs: []any{
						&ruleIRefExpr{index: 123 /* sp */},
						&ruleIRefExpr{index: 1 /* stmtSt */},
						&ruleIRefExpr{index: 123 /* sp */},
					},
				},
			},
		},
		{
			name: "stmtSt",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&litMatcher{val: "^st", want: "\"^st\""},
							&ruleIRefExpr{index: 130 /* st_expr */},
						},
					},
					&ruleIRefExpr{index: 2 /* stmtRoot */},
				},
			},
		},
		{
			name: "stmtRoot",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 3 /* stmtLines */},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "stmtLines",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&andCodeExpr{run: (*parser).call_onstmtLines_3},
							&ruleIRefExpr{index: 6 /* stmtWithBlock */},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 3 /* stmtLines */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 4 /* flagsSwitch */},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 3 /* stmtLines */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 127 /* comment */},
							&ruleIRefExpr{index: 123 /* sp */},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 3 /* stmtLines */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 5 /* stmtWithSemicolon */},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 7 /* nextLine */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&oneOrMoreExpr{
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: ";", want: "\";\""},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 3 /* stmtLines */},
							},
						},
					},
				},
			},
		},
		{
			name:      "flagsSwitch",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onflagsSwitch_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "//", want: "\"//\""},
						&ruleIRefExpr{index: 123 /* sp */},
						&litMatcher{val: "#EnableDice", want: "\"#EnableDice\""},
						&ruleIRefExpr{index: 125 /* sp1x */},
						&labeledExpr{
							label: "id",
							expr:  &ruleIRefExpr{index: 98 /* identifier */},
						},
						&ruleIRefExpr{index: 125 /* sp1x */},
						&labeledExpr{
							label: "on",
							expr: &choiceExpr{
								alternatives: []any{
									&litMatcher{val: "true", want: "\"true\""},
									&litMatcher{val: "false", want: "\"false\""},
								},
							},
							textCapture: true,
						},
						&ruleIRefExpr{index: 128 /* commentLineRest */},
					},
				},
			},
		},
		{
			name: "stmtWithSemicolon",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleIRefExpr{index: 8 /* stmtBreak */},
					&ruleIRefExpr{index: 9 /* stmtContinue */},
					&ruleIRefExpr{index: 26 /* exprRoot */},
				},
			},
		},
		{
			name: "stmtWithBlock",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleIRefExpr{index: 14 /* stmtIf */},
					&ruleIRefExpr{index: 16 /* stmtFunc */},
					&ruleIRefExpr{index: 11 /* stmtWhile */},
					&ruleIRefExpr{index: 10 /* stmtReturn */},
				},
			},
		},
		{
			name: "nextLine",
			expr: &seqExpr{
				exprs: []any{
					&oneOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&choiceExpr{
									alternatives: []any{
										&seqExpr{
											exprs: []any{
												&ruleIRefExpr{index: 126 /* spNoCR */},
												&litMatcher{val: "\n", want: "\"\\n\""},
											},
										},
										&seqExpr{
											exprs: []any{
												&ruleIRefExpr{index: 123 /* sp */},
												&litMatcher{val: ";", want: "\";\""},
											},
										},
									},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&zeroOrOneExpr{
						expr: &ruleIRefExpr{index: 3 /* stmtLines */},
					},
				},
			},
		},
		{
			name: "stmtBreak",
			expr: &actionExpr{
				run: (*parser).call_onstmtBreak_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "break", want: "\"break\""},
						&ruleIRefExpr{index: 123 /* sp */},
					},
				},
			},
		},
		{
			name: "stmtContinue",
			expr: &actionExpr{
				run: (*parser).call_onstmtContinue_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "continue", want: "\"continue\""},
						&ruleIRefExpr{index: 123 /* sp */},
					},
				},
			},
		},
		{
			name: "stmtReturn",
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onstmtReturn_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "return", want: "\"return\""},
								&ruleIRefExpr{index: 125 /* sp1x */},
								&ruleIRefExpr{index: 26 /* exprRoot */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtReturn_7,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "return", want: "\"return\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
				},
			},
		},
		{
			name: "stmtWhile",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onstmtWhile_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "while", want: "\"while\""},
								&ruleIRefExpr{index: 125 /* sp1x */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtWhile_6,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 26 /* exprRoot */},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run:  (*parser).call_onstmtWhile_10,
						expr: &ruleIRefExpr{index: 12 /* block */},
					},
				},
			},
		},
		{
			name: "block",
			expr: &seqExpr{
				exprs: []any{
					&choiceExpr{
						alternatives: []any{
							&seqExpr{
								exprs: []any{
									&litMatcher{val: "{", want: "\"{\""},
									&ruleIRefExpr{index: 123 /* sp */},
									&litMatcher{val: "}", want: "\"}\""},
								},
							},
							&seqExpr{
								exprs: []any{
									&litMatcher{val: "{", want: "\"{\""},
									&ruleIRefExpr{index: 123 /* sp */},
									&ruleIRefExpr{index: 2 /* stmtRoot */},
									&litMatcher{val: "}", want: "\"}\""},
								},
							},
						},
					},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "stmtElse",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "else", want: "\"else\""},
					&choiceExpr{
						alternatives: []any{
							&seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 123 /* sp */},
									&ruleIRefExpr{index: 12 /* block */},
								},
							},
							&seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 125 /* sp1x */},
									&ruleIRefExpr{index: 14 /* stmtIf */},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stmtIf",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "if", want: "\"if\""},
					&ruleIRefExpr{index: 125 /* sp1x */},
					&choiceExpr{
						alternatives: []any{
							&seqExpr{
								exprs: []any{
									&actionExpr{
										run: (*parser).call_onstmtIf_6,
										expr: &seqExpr{
											exprs: []any{
												&ruleIRefExpr{index: 26 /* exprRoot */},
												&ruleIRefExpr{index: 123 /* sp */},
											},
										},
									},
									&actionExpr{
										run:  (*parser).call_onstmtIf_10,
										expr: &ruleIRefExpr{index: 12 /* block */},
									},
									&actionExpr{
										run: (*parser).call_onstmtIf_12,
										expr: &zeroOrOneExpr{
											expr: &ruleIRefExpr{index: 13 /* stmtElse */},
										},
									},
								},
							},
							&andCodeExpr{run: (*parser).call_onstmtIf_15},
						},
					},
				},
			},
		},
		{
			name:      "func_def_params",
			varExists: true,
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onfunc_def_params_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "(", want: "\"(\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: ")", want: "\")\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onfunc_def_params_9,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "(", want: "\"(\""},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onfunc_def_params_13,
								expr: &seqExpr{
									exprs: []any{
										&labeledExpr{
											label: "id",
											expr:  &ruleIRefExpr{index: 98 /* identifier */},
										},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&zeroOrMoreExpr{
										expr: &seqExpr{
											exprs: []any{
												&actionExpr{
													run: (*parser).call_onfunc_def_params_21,
													expr: &seqExpr{
														exprs: []any{
															&litMatcher{val: ",", want: "\",\""},
															&ruleIRefExpr{index: 123 /* sp */},
															&labeledExpr{
																label: "id2",
																expr:  &ruleIRefExpr{index: 98 /* identifier */},
															},
															&ruleIRefExpr{index: 123 /* sp */},
														},
													},
												},
												&codeExpr{
													run: (*parser).call_onfunc_def_params_28,
												},
											},
										},
									},
									&litMatcher{val: ")", want: "\")\""},
									&ruleIRefExpr{index: 123 /* sp */},
								},
							},
						},
					},
				},
			},
		},
		{
			name:      "stmtFunc",
			varExists: true,
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onstmtFunc_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "func", want: "\"func\""},
								&ruleIRefExpr{index: 125 /* sp1x */},
								&labeledExpr{
									label: "id",
									expr:  &ruleIRefExpr{index: 98 /* identifier */},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtFunc_9,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 15 /* func_def_params */},
								&litMatcher{val: "{", want: "\"{\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtFunc_14,
						expr: &seqExpr{
							exprs: []any{
								&labeledExpr{
									label: "exprText",
									expr: &zeroOrOneExpr{
										expr: &ruleIRefExpr{index: 2 /* stmtRoot */},
									},
									textCapture: true,
								},
								&litMatcher{val: "}", want: "\"}\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
				},
			},
		},
		{
			name:      "stmtAssignType1",
			varExists: true,
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onstmtAssignType1_2,
						expr: &seqExpr{
							exprs: []any{
								&labeledExpr{
									label: "id",
									expr:  &ruleIRefExpr{index: 98 /* identifier */},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtAssignType1_7,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "=", want: "\"=\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 26 /* exprRoot */},
							},
						},
					},
				},
			},
		},
		{
			name:      "stmtAssignType2",
			varExists: true,
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onstmtAssignType2_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "&", want: "\"&\""},
								&labeledExpr{
									label: "id",
									expr:  &ruleIRefExpr{index: 98 /* identifier */},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtAssignType2_8,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "=", want: "\"=\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtAssignType2_12,
						expr: &labeledExpr{
							label:       "expr",
							expr:        &ruleIRefExpr{index: 26 /* exprRoot */},
							textCapture: true,
						},
					},
				},
			},
		},
		{
			name:      "stmtAssignType3",
			varExists: true,
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onstmtAssignType3_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "&", want: "\"&\""},
								&labeledExpr{
									label: "id",
									expr:  &ruleIRefExpr{index: 98 /* identifier */},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtAssignType3_8,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: ".", want: "\".\""},
								&labeledExpr{
									label: "id2",
									expr:  &ruleIRefExpr{index: 98 /* identifier */},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtAssignType3_14,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: "=", want: "\"=\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 26 /* exprRoot */},
							},
						},
					},
				},
			},
		},
		{
			name:      "stmtAssignType4",
			varExists: true,
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onstmtAssignType4_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "this", want: "\"this\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: ".", want: "\".\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&labeledExpr{
									label: "id",
									expr:  &ruleIRefExpr{index: 98 /* identifier */},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtAssignType4_11,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "=", want: "\"=\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 26 /* exprRoot */},
							},
						},
					},
				},
			},
		},
		{
			name:      "stmtAssignType5",
			varExists: true,
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onstmtAssignType5_2,
						expr: &seqExpr{
							exprs: []any{
								&labeledExpr{
									label: "id",
									expr:  &ruleIRefExpr{index: 98 /* identifier */},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtAssignType5_7,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: ".", want: "\".\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&labeledExpr{
									label: "id2",
									expr:  &ruleIRefExpr{index: 98 /* identifier */},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onstmtAssignType5_14,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "=", want: "\"=\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 26 /* exprRoot */},
							},
						},
					},
				},
			},
		},
		{
			name: "stmtAssignType6",
			expr: &actionExpr{
				run: (*parser).call_onstmtAssignType6_1,
				expr: &seqExpr{
					exprs: []any{
						&ruleIRefExpr{index: 30 /* exprSlice */},
						&litMatcher{val: "[", want: "\"[\""},
						&ruleIRefExpr{index: 123 /* sp */},
						&ruleIRefExpr{index: 26 /* exprRoot */},
						&litMatcher{val: "]", want: "\"]\""},
						&ruleIRefExpr{index: 123 /* sp */},
						&litMatcher{val: "=", want: "\"=\""},
						&ruleIRefExpr{index: 123 /* sp */},
						&ruleIRefExpr{index: 26 /* exprRoot */},
					},
				},
			},
		},
		{
			name: "stmtAssignType7",
			expr: &actionExpr{
				run: (*parser).call_onstmtAssignType7_1,
				expr: &seqExpr{
					exprs: []any{
						&ruleIRefExpr{index: 30 /* exprSlice */},
						&ruleIRefExpr{index: 28 /* _sliceSuffix */},
						&litMatcher{val: "=", want: "\"=\""},
						&ruleIRefExpr{index: 123 /* sp */},
						&ruleIRefExpr{index: 26 /* exprRoot */},
					},
				},
			},
		},
		{
			name: "stmtAssign",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 17 /* stmtAssignType1 */},
							},
							&ruleIRefExpr{index: 17 /* stmtAssignType1 */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 18 /* stmtAssignType2 */},
							},
							&ruleIRefExpr{index: 18 /* stmtAssignType2 */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 19 /* stmtAssignType3 */},
							},
							&ruleIRefExpr{index: 19 /* stmtAssignType3 */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 20 /* stmtAssignType4 */},
							},
							&ruleIRefExpr{index: 20 /* stmtAssignType4 */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 21 /* stmtAssignType5 */},
							},
							&ruleIRefExpr{index: 21 /* stmtAssignType5 */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 22 /* stmtAssignType6 */},
							},
							&ruleIRefExpr{index: 22 /* stmtAssignType6 */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 23 /* stmtAssignType7 */},
							},
							&ruleIRefExpr{index: 23 /* stmtAssignType7 */},
						},
					},
				},
			},
		},
		{
			name: "nestedBoost",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &seqExpr{
									exprs: []any{
										&ruleIRefExpr{index: 103 /* subX */},
										&ruleIRefExpr{index: 123 /* sp */},
										&charClassMatcher{
											val:   "[-+*/%^dDcCaA&|?<>=]",
											chars: []rune{'-', '+', '*', '/', '%', '^', 'd', 'D', 'c', 'C', 'a', 'A', '&', '|', '?', '<', '>', '='},
										},
									},
								},
							},
							&choiceExpr{
								alternatives: []any{
									&ruleIRefExpr{index: 24 /* stmtAssign */},
									&ruleIRefExpr{index: 30 /* exprSlice */},
								},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 103 /* subX */},
							},
							&ruleIRefExpr{index: 103 /* subX */},
						},
					},
				},
			},
		},
		{
			name: "exprRoot",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleIRefExpr{index: 25 /* nestedBoost */},
					&ruleIRefExpr{index: 24 /* stmtAssign */},
					&ruleIRefExpr{index: 30 /* exprSlice */},
				},
			},
		},
		{
			name: "_step",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&litMatcher{val: ":", want: "\":\""},
							&ruleIRefExpr{index: 123 /* sp */},
							&choiceExpr{
								alternatives: []any{
									&ruleIRefExpr{index: 26 /* exprRoot */},
									&actionExpr{
										run:  (*parser).call_on_step_7,
										expr: &ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
						},
					},
					&actionExpr{
						run:  (*parser).call_on_step_9,
						expr: &ruleIRefExpr{index: 123 /* sp */},
					},
				},
			},
		},
		{
			name: "_sliceSuffix",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "[", want: "\"[\""},
					&ruleIRefExpr{index: 123 /* sp */},
					&choiceExpr{
						alternatives: []any{
							&ruleIRefExpr{index: 26 /* exprRoot */},
							&actionExpr{
								run:  (*parser).call_on_sliceSuffix_6,
								expr: &ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&litMatcher{val: ":", want: "\":\""},
					&ruleIRefExpr{index: 123 /* sp */},
					&choiceExpr{
						alternatives: []any{
							&ruleIRefExpr{index: 26 /* exprRoot */},
							&actionExpr{
								run:  (*parser).call_on_sliceSuffix_12,
								expr: &ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&ruleIRefExpr{index: 27 /* _step */},
					&ruleIRefExpr{index: 123 /* sp */},
					&litMatcher{val: "]", want: "\"]\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "exprSliceType1",
			expr: &actionExpr{
				run: (*parser).call_onexprSliceType1_1,
				expr: &seqExpr{
					exprs: []any{
						&ruleIRefExpr{index: 34 /* exprTernary */},
						&ruleIRefExpr{index: 28 /* _sliceSuffix */},
						&notExpr{
							expr: &litMatcher{val: "=", want: "\"=\""},
						},
					},
				},
			},
		},
		{
			name: "exprSlice",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 29 /* exprSliceType1 */},
							},
							&ruleIRefExpr{index: 29 /* exprSliceType1 */},
						},
					},
					&ruleIRefExpr{index: 34 /* exprTernary */},
				},
			},
		},
		{
			name: "exprValueIfExists",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onexprValueIfExists_2,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 35 /* exprLogicOr */},
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: "?", want: "\"?\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onexprValueIfExists_8,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 35 /* exprLogicOr */},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
				},
			},
		},
		{
			name: "exprTernaryType1",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onexprTernaryType1_2,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 35 /* exprLogicOr */},
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: "?", want: "\"?\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onexprTernaryType1_8,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 35 /* exprLogicOr */},
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: ":", want: "\":\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onexprTernaryType1_14,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 35 /* exprLogicOr */},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
				},
			},
		},
		{
			name: "exprTernaryType2",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run:  (*parser).call_onexprTernaryType2_2,
						expr: &ruleIRefExpr{index: 31 /* exprValueIfExists */},
					},
					&actionExpr{
						run: (*parser).call_onexprTernaryType2_4,
						expr: &zeroOrMoreExpr{
							expr: &actionExpr{
								run: (*parser).call_onexprTernaryType2_6,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: ",", want: "\",\""},
										&ruleIRefExpr{index: 123 /* sp */},
										&ruleIRefExpr{index: 31 /* exprValueIfExists */},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprTernary",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 32 /* exprTernaryType1 */},
							},
							&ruleIRefExpr{index: 32 /* exprTernaryType1 */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 33 /* exprTernaryType2 */},
							},
							&ruleIRefExpr{index: 33 /* exprTernaryType2 */},
						},
					},
					&ruleIRefExpr{index: 35 /* exprLogicOr */},
				},
			},
		},
		{
			name: "exprLogicOr",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 36 /* exprLogicAnd */},
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&actionExpr{
									run: (*parser).call_onexprLogicOr_5,
									expr: &seqExpr{
										exprs: []any{
											&ruleIRefExpr{index: 123 /* sp */},
											&ruleIRefExpr{index: 115 /* logicOr */},
										},
									},
								},
								&actionExpr{
									run:  (*parser).call_onexprLogicOr_9,
									expr: &ruleIRefExpr{index: 36 /* exprLogicAnd */},
								},
								&codeExpr{
									run: (*parser).call_onexprLogicOr_11,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprLogicAnd",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 37 /* exprBitwiseOr */},
					&zeroOrMoreExpr{
						expr: &actionExpr{
							run: (*parser).call_onexprLogicAnd_4,
							expr: &seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 123 /* sp */},
									&ruleIRefExpr{index: 116 /* logicAnd */},
									&ruleIRefExpr{index: 37 /* exprBitwiseOr */},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprBitwiseOr",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&andCodeExpr{run: (*parser).call_onexprBitwiseOr_3},
							&ruleIRefExpr{index: 39 /* exprCompare */},
						},
					},
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 38 /* exprBitwiseAnd */},
							&zeroOrMoreExpr{
								expr: &actionExpr{
									run: (*parser).call_onexprBitwiseOr_8,
									expr: &seqExpr{
										exprs: []any{
											&ruleIRefExpr{index: 123 /* sp */},
											&ruleIRefExpr{index: 113 /* bitwiseOr */},
											&ruleIRefExpr{index: 38 /* exprBitwiseAnd */},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprBitwiseAnd",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 39 /* exprCompare */},
					&zeroOrMoreExpr{
						expr: &actionExpr{
							run: (*parser).call_onexprBitwiseAnd_4,
							expr: &seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 123 /* sp */},
									&ruleIRefExpr{index: 114 /* bitwiseAnd */},
									&ruleIRefExpr{index: 39 /* exprCompare */},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprCompare",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 40 /* exprAdditive */},
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 123 /* sp */},
								&choiceExpr{
									alternatives: []any{
										&actionExpr{
											run: (*parser).call_onexprCompare_7,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 117 /* lt */},
													&ruleIRefExpr{index: 40 /* exprAdditive */},
												},
											},
										},
										&actionExpr{
											run: (*parser).call_onexprCompare_11,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 119 /* le */},
													&ruleIRefExpr{index: 40 /* exprAdditive */},
												},
											},
										},
										&actionExpr{
											run: (*parser).call_onexprCompare_15,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 121 /* eq */},
													&ruleIRefExpr{index: 40 /* exprAdditive */},
												},
											},
										},
										&actionExpr{
											run: (*parser).call_onexprCompare_19,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 122 /* ne */},
													&ruleIRefExpr{index: 40 /* exprAdditive */},
												},
											},
										},
										&actionExpr{
											run: (*parser).call_onexprCompare_23,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 120 /* ge */},
													&ruleIRefExpr{index: 40 /* exprAdditive */},
												},
											},
										},
										&actionExpr{
											run: (*parser).call_onexprCompare_27,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 118 /* gt */},
													&ruleIRefExpr{index: 40 /* exprAdditive */},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprAdditive",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 41 /* exprMultiplicative */},
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 123 /* sp */},
								&choiceExpr{
									alternatives: []any{
										&actionExpr{
											run: (*parser).call_onexprAdditive_7,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 106 /* add */},
													&ruleIRefExpr{index: 41 /* exprMultiplicative */},
												},
											},
										},
										&actionExpr{
											run: (*parser).call_onexprAdditive_11,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 107 /* minus */},
													&ruleIRefExpr{index: 41 /* exprMultiplicative */},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprMultiplicative",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 42 /* exprNullCoalescing */},
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 123 /* sp */},
								&choiceExpr{
									alternatives: []any{
										&actionExpr{
											run: (*parser).call_onexprMultiplicative_7,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 108 /* multiply */},
													&ruleIRefExpr{index: 43 /* exprExp */},
												},
											},
										},
										&actionExpr{
											run: (*parser).call_onexprMultiplicative_11,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 109 /* divide */},
													&ruleIRefExpr{index: 43 /* exprExp */},
												},
											},
										},
										&actionExpr{
											run: (*parser).call_onexprMultiplicative_15,
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 110 /* modulus */},
													&ruleIRefExpr{index: 43 /* exprExp */},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprNullCoalescing",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 43 /* exprExp */},
					&zeroOrMoreExpr{
						expr: &actionExpr{
							run: (*parser).call_onexprNullCoalescing_4,
							expr: &seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 123 /* sp */},
									&ruleIRefExpr{index: 112 /* nullCoalescing */},
									&ruleIRefExpr{index: 43 /* exprExp */},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprExp",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 44 /* exprUnaryNeg */},
					&zeroOrMoreExpr{
						expr: &actionExpr{
							run: (*parser).call_onexprExp_4,
							expr: &seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 123 /* sp */},
									&ruleIRefExpr{index: 111 /* exponentiation */},
									&ruleIRefExpr{index: 44 /* exprUnaryNeg */},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "exprUnaryNeg",
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onexprUnaryNeg_2,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 107 /* minus */},
								&ruleIRefExpr{index: 69 /* exprDice */},
							},
						},
					},
					&ruleIRefExpr{index: 45 /* exprUnaryPos */},
				},
			},
		},
		{
			name: "exprUnaryPos",
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onexprUnaryPos_2,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 106 /* add */},
								&ruleIRefExpr{index: 69 /* exprDice */},
							},
						},
					},
					&ruleIRefExpr{index: 69 /* exprDice */},
				},
			},
		},
		{
			name: "nos",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleIRefExpr{index: 82 /* number */},
					&ruleIRefExpr{index: 102 /* sub */},
				},
			},
		},
		{
			name: "detailStart",
			expr: &codeExpr{
				run: (*parser).call_ondetailStart_1,
			},
		},
		{
			name: "detailEnd",
			expr: &codeExpr{
				run: (*parser).call_ondetailEnd_1,
			},
		},
		{
			name: "_diceMod",
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_on_diceMod_2,
						expr: &seqExpr{
							exprs: []any{
								&choiceExpr{
									alternatives: []any{
										&litMatcher{val: "kl", want: "\"kl\""},
										&charClassMatcher{
											val:   "[qQ]",
											chars: []rune{'q', 'Q'},
										},
									},
								},
								&ruleIRefExpr{index: 46 /* nos */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_on_diceMod_8,
						expr: &choiceExpr{
							alternatives: []any{
								&litMatcher{val: "kl", want: "\"kl\""},
								&charClassMatcher{
									val:   "[qQ]",
									chars: []rune{'q', 'Q'},
								},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_on_diceMod_12,
						expr: &seqExpr{
							exprs: []any{
								&choiceExpr{
									alternatives: []any{
										&litMatcher{val: "kh", want: "\"kh\""},
										&charClassMatcher{
											val:   "[kK]",
											chars: []rune{'k', 'K'},
										},
									},
								},
								&ruleIRefExpr{index: 46 /* nos */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_on_diceMod_18,
						expr: &choiceExpr{
							alternatives: []any{
								&litMatcher{val: "kh", want: "\"kh\""},
								&charClassMatcher{
									val:   "[kK]",
									chars: []rune{'k', 'K'},
								},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_on_diceMod_22,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "dh", want: "\"dh\""},
								&ruleIRefExpr{index: 46 /* nos */},
							},
						},
					},
					&actionExpr{
						run:  (*parser).call_on_diceMod_26,
						expr: &litMatcher{val: "dh", want: "\"dh\""},
					},
					&actionExpr{
						run: (*parser).call_on_diceMod_28,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "dl", want: "\"dl\""},
								&ruleIRefExpr{index: 46 /* nos */},
							},
						},
					},
					&actionExpr{
						run:  (*parser).call_on_diceMod_32,
						expr: &litMatcher{val: "dl", want: "\"dl\""},
					},
				},
			},
		},
		{
			name: "_diceModType2",
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_on_diceModType2_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "min", want: "\"min\""},
								&ruleIRefExpr{index: 46 /* nos */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_on_diceModType2_6,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "max", want: "\"max\""},
								&ruleIRefExpr{index: 46 /* nos */},
							},
						},
					},
				},
			},
		},
		{
			name: "_dicePearMod",
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_on_dicePearMod_2,
						expr: &choiceExpr{
							alternatives: []any{
								&litMatcher{val: "优势", want: "\"优势\""},
								&litMatcher{val: "優勢", want: "\"優勢\""},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_on_dicePearMod_6,
						expr: &choiceExpr{
							alternatives: []any{
								&litMatcher{val: "劣势", want: "\"劣势\""},
								&litMatcher{val: "劣勢", want: "\"劣勢\""},
							},
						},
					},
				},
			},
		},
		{
			name: "_diceType1",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 46 /* nos */},
					&charClassMatcher{
						val:   "[dD]",
						chars: []rune{'d', 'D'},
					},
					&ruleIRefExpr{index: 46 /* nos */},
				},
			},
		},
		{
			name: "_diceType2",
			expr: &seqExpr{
				exprs: []any{
					&charClassMatcher{
						val:   "[dD]",
						chars: []rune{'d', 'D'},
					},
					&ruleIRefExpr{index: 46 /* nos */},
				},
			},
		},
		{
			name: "_diceType3",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 46 /* nos */},
					&charClassMatcher{
						val:   "[dD]",
						chars: []rune{'d', 'D'},
					},
				},
			},
		},
		{
			name: "_diceType4",
			expr: &seqExpr{
				exprs: []any{
					&charClassMatcher{
						val:   "[dD]",
						chars: []rune{'d', 'D'},
					},
					&choiceExpr{
						alternatives: []any{
							&litMatcher{val: "优势", want: "\"优势\""},
							&litMatcher{val: "優勢", want: "\"優勢\""},
							&litMatcher{val: "劣势", want: "\"劣势\""},
							&litMatcher{val: "劣勢", want: "\"劣勢\""},
							&notExpr{
								expr: &ruleIRefExpr{index: 100 /* xidStart */},
							},
						},
					},
				},
			},
		},
		{
			name: "_diceExpr1",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_on_diceExpr1_2,
						expr: &charClassMatcher{
							val:   "[dD]",
							chars: []rune{'d', 'D'},
						},
					},
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 46 /* nos */},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 49 /* _diceMod */},
							},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 50 /* _diceModType2 */},
							},
						},
					},
				},
			},
		},
		{
			name: "_diceExpr2",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_on_diceExpr2_2,
						expr: &charClassMatcher{
							val:   "[dD]",
							chars: []rune{'d', 'D'},
						},
					},
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 46 /* nos */},
							&zeroOrOneExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&ruleIRefExpr{index: 51 /* _dicePearMod */},
										&ruleIRefExpr{index: 49 /* _diceMod */},
									},
								},
							},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 50 /* _diceModType2 */},
							},
						},
					},
				},
			},
		},
		{
			name: "_diceExpr3",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_on_diceExpr3_2,
						expr: &charClassMatcher{
							val:   "[dD]",
							chars: []rune{'d', 'D'},
						},
					},
					&seqExpr{
						exprs: []any{
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 49 /* _diceMod */},
							},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 50 /* _diceModType2 */},
							},
						},
					},
				},
			},
		},
		{
			name: "_diceExpr4",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_on_diceExpr4_2,
						expr: &charClassMatcher{
							val:   "[dD]",
							chars: []rune{'d', 'D'},
						},
					},
					&seqExpr{
						exprs: []any{
							&zeroOrOneExpr{
								expr: &choiceExpr{
									alternatives: []any{
										&ruleIRefExpr{index: 51 /* _dicePearMod */},
										&ruleIRefExpr{index: 49 /* _diceMod */},
									},
								},
							},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 50 /* _diceModType2 */},
							},
						},
					},
				},
			},
		},
		{
			name: "_diceExprX",
			expr: &actionExpr{
				run: (*parser).call_on_diceExprX_1,
				expr: &seqExpr{
					exprs: []any{
						&andExpr{
							expr: &ruleIRefExpr{index: 53 /* _diceType2 */},
						},
						&ruleIRefExpr{index: 47 /* detailStart */},
						&ruleIRefExpr{index: 56 /* _diceExpr1 */},
						&ruleIRefExpr{index: 48 /* detailEnd */},
					},
				},
			},
		},
		{
			name: "_wodTypeMain",
			expr: &seqExpr{
				exprs: []any{
					&charClassMatcher{
						val:   "[aA]",
						chars: []rune{'a', 'A'},
					},
					&ruleIRefExpr{index: 46 /* nos */},
					&zeroOrMoreExpr{
						expr: &choiceExpr{
							alternatives: []any{
								&seqExpr{
									exprs: []any{
										&charClassMatcher{
											val:   "[mM]",
											chars: []rune{'m', 'M'},
										},
										&ruleIRefExpr{index: 46 /* nos */},
									},
								},
								&seqExpr{
									exprs: []any{
										&charClassMatcher{
											val:   "[kK]",
											chars: []rune{'k', 'K'},
										},
										&ruleIRefExpr{index: 46 /* nos */},
									},
								},
								&seqExpr{
									exprs: []any{
										&charClassMatcher{
											val:   "[qQ]",
											chars: []rune{'q', 'Q'},
										},
										&ruleIRefExpr{index: 46 /* nos */},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "_wodDiceType",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 46 /* nos */},
							&ruleIRefExpr{index: 61 /* _wodTypeMain */},
						},
					},
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 61 /* _wodTypeMain */},
							&notExpr{
								expr: &ruleIRefExpr{index: 101 /* xidContinue */},
							},
						},
					},
				},
			},
		},
		{
			name: "_wodMain",
			expr: &seqExpr{
				exprs: []any{
					&charClassMatcher{
						val:   "[aA]",
						chars: []rune{'a', 'A'},
					},
					&ruleIRefExpr{index: 46 /* nos */},
					&zeroOrMoreExpr{
						expr: &choiceExpr{
							alternatives: []any{
								&actionExpr{
									run: (*parser).call_on_wodMain_6,
									expr: &seqExpr{
										exprs: []any{
											&charClassMatcher{
												val:   "[mM]",
												chars: []rune{'m', 'M'},
											},
											&ruleIRefExpr{index: 46 /* nos */},
										},
									},
								},
								&actionExpr{
									run: (*parser).call_on_wodMain_10,
									expr: &seqExpr{
										exprs: []any{
											&charClassMatcher{
												val:   "[kK]",
												chars: []rune{'k', 'K'},
											},
											&ruleIRefExpr{index: 46 /* nos */},
										},
									},
								},
								&actionExpr{
									run: (*parser).call_on_wodMain_14,
									expr: &seqExpr{
										exprs: []any{
											&charClassMatcher{
												val:   "[qQ]",
												chars: []rune{'q', 'Q'},
											},
											&ruleIRefExpr{index: 46 /* nos */},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "_cocDiceType",
			expr: &seqExpr{
				exprs: []any{
					&charClassMatcher{
						val:   "[pPbB]",
						chars: []rune{'p', 'P', 'b', 'B'},
					},
					&choiceExpr{
						alternatives: []any{
							&seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 46 /* nos */},
									&notExpr{
										expr: &ruleIRefExpr{index: 101 /* xidContinue */},
									},
								},
							},
							&notExpr{
								expr: &ruleIRefExpr{index: 101 /* xidContinue */},
							},
						},
					},
				},
			},
		},
		{
			name: "_diceCocBonus",
			expr: &actionExpr{
				run: (*parser).call_on_diceCocBonus_1,
				expr: &seqExpr{
					exprs: []any{
						&charClassMatcher{
							val:   "[bB]",
							chars: []rune{'b', 'B'},
						},
						&choiceExpr{
							alternatives: []any{
								&seqExpr{
									exprs: []any{
										&ruleIRefExpr{index: 46 /* nos */},
										&notExpr{
											expr: &ruleIRefExpr{index: 101 /* xidContinue */},
										},
									},
								},
								&actionExpr{
									run: (*parser).call_on_diceCocBonus_9,
									expr: &notExpr{
										expr: &ruleIRefExpr{index: 101 /* xidContinue */},
									},
								},
							},
						},
						&ruleIRefExpr{index: 48 /* detailEnd */},
					},
				},
			},
		},
		{
			name: "_diceCocPenalty",
			expr: &actionExpr{
				run: (*parser).call_on_diceCocPenalty_1,
				expr: &seqExpr{
					exprs: []any{
						&charClassMatcher{
							val:   "[pP]",
							chars: []rune{'p', 'P'},
						},
						&choiceExpr{
							alternatives: []any{
								&seqExpr{
									exprs: []any{
										&ruleIRefExpr{index: 46 /* nos */},
										&notExpr{
											expr: &ruleIRefExpr{index: 101 /* xidContinue */},
										},
									},
								},
								&actionExpr{
									run: (*parser).call_on_diceCocPenalty_9,
									expr: &notExpr{
										expr: &ruleIRefExpr{index: 101 /* xidContinue */},
									},
								},
							},
						},
						&ruleIRefExpr{index: 48 /* detailEnd */},
					},
				},
			},
		},
		{
			name: "_dcDiceType",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 46 /* nos */},
					&charClassMatcher{
						val:   "[cC]",
						chars: []rune{'c', 'C'},
					},
					&ruleIRefExpr{index: 46 /* nos */},
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&charClassMatcher{
									val:   "[mM]",
									chars: []rune{'m', 'M'},
								},
								&ruleIRefExpr{index: 46 /* nos */},
							},
						},
					},
				},
			},
		},
		{
			name: "_fateDiceType",
			expr: &seqExpr{
				exprs: []any{
					&charClassMatcher{
						val:   "[fF]",
						chars: []rune{'f', 'F'},
					},
					&notExpr{
						expr: &ruleIRefExpr{index: 101 /* xidContinue */},
					},
				},
			},
		},
		{
			name: "exprDice",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onexprDice_3,
								expr: &seqExpr{
									exprs: []any{
										&andExpr{
											expr: &ruleIRefExpr{index: 52 /* _diceType1 */},
										},
										&ruleIRefExpr{index: 47 /* detailStart */},
										&ruleIRefExpr{index: 46 /* nos */},
										&ruleIRefExpr{index: 56 /* _diceExpr1 */},
										&ruleIRefExpr{index: 48 /* detailEnd */},
									},
								},
							},
							&zeroOrMoreExpr{
								expr: &ruleIRefExpr{index: 60 /* _diceExprX */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onexprDice_14,
								expr: &seqExpr{
									exprs: []any{
										&andExpr{
											expr: &ruleIRefExpr{index: 53 /* _diceType2 */},
										},
										&ruleIRefExpr{index: 47 /* detailStart */},
										&ruleIRefExpr{index: 57 /* _diceExpr2 */},
										&ruleIRefExpr{index: 48 /* detailEnd */},
									},
								},
							},
							&zeroOrMoreExpr{
								expr: &ruleIRefExpr{index: 60 /* _diceExprX */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onexprDice_24,
								expr: &seqExpr{
									exprs: []any{
										&andCodeExpr{run: (*parser).call_onexprDice_26},
										&andExpr{
											expr: &ruleIRefExpr{index: 54 /* _diceType3 */},
										},
										&ruleIRefExpr{index: 47 /* detailStart */},
										&ruleIRefExpr{index: 46 /* nos */},
										&ruleIRefExpr{index: 58 /* _diceExpr3 */},
										&ruleIRefExpr{index: 48 /* detailEnd */},
									},
								},
							},
							&zeroOrMoreExpr{
								expr: &ruleIRefExpr{index: 60 /* _diceExprX */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onexprDice_36,
								expr: &seqExpr{
									exprs: []any{
										&andCodeExpr{run: (*parser).call_onexprDice_38},
										&andExpr{
											expr: &ruleIRefExpr{index: 55 /* _diceType4 */},
										},
										&ruleIRefExpr{index: 47 /* detailStart */},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onexprDice_42,
								expr: &seqExpr{
									exprs: []any{
										&ruleIRefExpr{index: 59 /* _diceExpr4 */},
										&ruleIRefExpr{index: 48 /* detailEnd */},
									},
								},
							},
							&zeroOrMoreExpr{
								expr: &ruleIRefExpr{index: 60 /* _diceExprX */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&andCodeExpr{run: (*parser).call_onexprDice_49},
							&andExpr{
								expr: &ruleIRefExpr{index: 64 /* _cocDiceType */},
							},
							&ruleIRefExpr{index: 47 /* detailStart */},
							&choiceExpr{
								alternatives: []any{
									&ruleIRefExpr{index: 65 /* _diceCocBonus */},
									&ruleIRefExpr{index: 66 /* _diceCocPenalty */},
								},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onexprDice_57,
								expr: &seqExpr{
									exprs: []any{
										&andCodeExpr{run: (*parser).call_onexprDice_59},
										&andExpr{
											expr: &ruleIRefExpr{index: 62 /* _wodDiceType */},
										},
										&ruleIRefExpr{index: 47 /* detailStart */},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onexprDice_63,
								expr: &seqExpr{
									exprs: []any{
										&choiceExpr{
											alternatives: []any{
												&seqExpr{
													exprs: []any{
														&actionExpr{
															run:  (*parser).call_onexprDice_67,
															expr: &ruleIRefExpr{index: 46 /* nos */},
														},
														&ruleIRefExpr{index: 63 /* _wodMain */},
													},
												},
												&seqExpr{
													exprs: []any{
														&ruleIRefExpr{index: 63 /* _wodMain */},
														&notExpr{
															expr: &ruleIRefExpr{index: 101 /* xidContinue */},
														},
													},
												},
											},
										},
										&ruleIRefExpr{index: 48 /* detailEnd */},
									},
								},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onexprDice_76,
								expr: &seqExpr{
									exprs: []any{
										&andCodeExpr{run: (*parser).call_onexprDice_78},
										&andExpr{
											expr: &ruleIRefExpr{index: 67 /* _dcDiceType */},
										},
										&ruleIRefExpr{index: 47 /* detailStart */},
									},
								},
							},
							&actionExpr{
								run:  (*parser).call_onexprDice_82,
								expr: &ruleIRefExpr{index: 46 /* nos */},
							},
							&actionExpr{
								run: (*parser).call_onexprDice_84,
								expr: &seqExpr{
									exprs: []any{
										&charClassMatcher{
											val:   "[cC]",
											chars: []rune{'c', 'C'},
										},
										&ruleIRefExpr{index: 46 /* nos */},
										&zeroOrMoreExpr{
											expr: &actionExpr{
												run: (*parser).call_onexprDice_89,
												expr: &seqExpr{
													exprs: []any{
														&charClassMatcher{
															val:   "[mM]",
															chars: []rune{'m', 'M'},
														},
														&ruleIRefExpr{index: 46 /* nos */},
													},
												},
											},
										},
										&ruleIRefExpr{index: 48 /* detailEnd */},
									},
								},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onexprDice_94,
						expr: &seqExpr{
							exprs: []any{
								&andCodeExpr{run: (*parser).call_onexprDice_96},
								&andExpr{
									expr: &ruleIRefExpr{index: 68 /* _fateDiceType */},
								},
								&ruleIRefExpr{index: 47 /* detailStart */},
								&charClassMatcher{
									val:   "[fF]",
									chars: []rune{'f', 'F'},
								},
								&notExpr{
									expr: &ruleIRefExpr{index: 101 /* xidContinue */},
								},
								&ruleIRefExpr{index: 48 /* detailEnd */},
							},
						},
					},
					&ruleIRefExpr{index: 81 /* value */},
				},
			},
		},
		{
			name: "array_call",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run:  (*parser).call_onarray_call_3,
								expr: &litMatcher{val: "kh", want: "\"kh\""},
							},
							&choiceExpr{
								alternatives: []any{
									&actionExpr{
										run:  (*parser).call_onarray_call_6,
										expr: &ruleIRefExpr{index: 82 /* number */},
									},
									&codeExpr{
										run: (*parser).call_onarray_call_8,
									},
								},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run:  (*parser).call_onarray_call_10,
								expr: &litMatcher{val: "kl", want: "\"kl\""},
							},
							&choiceExpr{
								alternatives: []any{
									&actionExpr{
										run:  (*parser).call_onarray_call_13,
										expr: &ruleIRefExpr{index: 82 /* number */},
									},
									&codeExpr{
										run: (*parser).call_onarray_call_15,
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						expr: &actionExpr{
							run: (*parser).call_onarray_call_17,
							expr: &seqExpr{
								exprs: []any{
									&litMatcher{val: "[", want: "\"[\""},
									&ruleIRefExpr{index: 123 /* sp */},
									&ruleIRefExpr{index: 26 /* exprRoot */},
									&ruleIRefExpr{index: 123 /* sp */},
									&litMatcher{val: "]", want: "\"]\""},
									&ruleIRefExpr{index: 123 /* sp */},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "item_getX",
			expr: &zeroOrMoreExpr{
				expr: &seqExpr{
					exprs: []any{
						&actionExpr{
							run: (*parser).call_onitem_getX_3,
							expr: &seqExpr{
								exprs: []any{
									&litMatcher{val: "[", want: "\"[\""},
									&ruleIRefExpr{index: 123 /* sp */},
									&ruleIRefExpr{index: 26 /* exprRoot */},
									&ruleIRefExpr{index: 123 /* sp */},
									&litMatcher{val: "]", want: "\"]\""},
									&ruleIRefExpr{index: 123 /* sp */},
									&notExpr{
										expr: &litMatcher{val: "=", want: "\"=\""},
									},
								},
							},
						},
						&zeroOrOneExpr{
							expr: &ruleIRefExpr{index: 76 /* func_invoke */},
						},
					},
				},
			},
		},
		{
			name: "item_get",
			expr: &zeroOrOneExpr{
				expr: &seqExpr{
					exprs: []any{
						&andLogicalExpr{
							expr: &ruleIRefExpr{index: 71 /* item_getX */},
						},
						&ruleIRefExpr{index: 71 /* item_getX */},
					},
				},
			},
		},
		{
			name:      "attr_getX",
			varExists: true,
			expr: &zeroOrMoreExpr{
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: ".", want: "\".\""},
						&actionExpr{
							run: (*parser).call_onattr_getX_4,
							expr: &seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 123 /* sp */},
									&labeledExpr{
										label: "id",
										expr:  &ruleIRefExpr{index: 98 /* identifier */},
									},
									&ruleIRefExpr{index: 123 /* sp */},
								},
							},
						},
						&zeroOrOneExpr{
							expr: &ruleIRefExpr{index: 76 /* func_invoke */},
						},
					},
				},
			},
		},
		{
			name: "attr_get",
			expr: &zeroOrOneExpr{
				expr: &seqExpr{
					exprs: []any{
						&andLogicalExpr{
							expr: &ruleIRefExpr{index: 73 /* attr_getX */},
						},
						&ruleIRefExpr{index: 73 /* attr_getX */},
					},
				},
			},
		},
		{
			name: "func_invoke2",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onfunc_invoke2_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "(", want: "\"(\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onfunc_invoke2_6,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 26 /* exprRoot */},
								&ruleIRefExpr{index: 123 /* sp */},
								&zeroOrMoreExpr{
									expr: &actionExpr{
										run: (*parser).call_onfunc_invoke2_11,
										expr: &seqExpr{
											exprs: []any{
												&litMatcher{val: ",", want: "\",\""},
												&ruleIRefExpr{index: 123 /* sp */},
												&ruleIRefExpr{index: 26 /* exprRoot */},
											},
										},
									},
								},
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: ")", want: "\")\""},
							},
						},
					},
				},
			},
		},
		{
			name: "func_invoke",
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onfunc_invoke_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "(", want: "\"(\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: ")", want: "\")\""},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 75 /* func_invoke2 */},
							},
							&ruleIRefExpr{index: 75 /* func_invoke2 */},
						},
					},
				},
			},
		},
		{
			name: "dict_item",
			expr: &actionExpr{
				run: (*parser).call_ondict_item_1,
				expr: &seqExpr{
					exprs: []any{
						&seqExpr{
							exprs: []any{
								&choiceExpr{
									alternatives: []any{
										&ruleIRefExpr{index: 78 /* value_id_without_colon */},
										&ruleIRefExpr{index: 26 /* exprRoot */},
									},
								},
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: ":", want: "\":\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 26 /* exprRoot */},
							},
						},
						&ruleIRefExpr{index: 123 /* sp */},
					},
				},
			},
		},
		{
			name:      "value_id_without_colon",
			varExists: true,
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onvalue_id_without_colon_2,
						expr: &seqExpr{
							exprs: []any{
								&labeledExpr{
									label: "id",
									expr:  &ruleIRefExpr{index: 99 /* identifierWithoutColon */},
								},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 76 /* func_invoke */},
							},
							&ruleIRefExpr{index: 72 /* item_get */},
							&ruleIRefExpr{index: 74 /* attr_get */},
						},
					},
				},
			},
		},
		{
			name: "value_array_range",
			expr: &actionExpr{
				run: (*parser).call_onvalue_array_range_1,
				expr: &seqExpr{
					exprs: []any{
						&litMatcher{val: "[", want: "\"[\""},
						&ruleIRefExpr{index: 123 /* sp */},
						&ruleIRefExpr{index: 26 /* exprRoot */},
						&litMatcher{val: "..", want: "\"..\""},
						&ruleIRefExpr{index: 123 /* sp */},
						&ruleIRefExpr{index: 26 /* exprRoot */},
						&litMatcher{val: "]", want: "\"]\""},
						&ruleIRefExpr{index: 123 /* sp */},
					},
				},
			},
		},
		{
			name: "value_array",
			expr: &seqExpr{
				exprs: []any{
					&actionExpr{
						run: (*parser).call_onvalue_array_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "[", want: "\"[\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onvalue_array_6,
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 26 /* exprRoot */},
								&zeroOrMoreExpr{
									expr: &actionExpr{
										run: (*parser).call_onvalue_array_10,
										expr: &seqExpr{
											exprs: []any{
												&litMatcher{val: ",", want: "\",\""},
												&ruleIRefExpr{index: 123 /* sp */},
												&ruleIRefExpr{index: 26 /* exprRoot */},
											},
										},
									},
								},
								&litMatcher{val: "]", want: "\"]\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
				},
			},
		},
		{
			name:      "value",
			varExists: true,
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onvalue_2,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "true", want: "\"true\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onvalue_6,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "false", want: "\"false\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onvalue_10,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "null", want: "\"null\""},
								&ruleIRefExpr{index: 123 /* sp */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onvalue_15,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "this", want: "\"this\""},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 72 /* item_get */},
									&ruleIRefExpr{index: 74 /* attr_get */},
								},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onvalue_23,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "&", want: "\"&\""},
										&labeledExpr{
											label: "id",
											expr:  &ruleIRefExpr{index: 98 /* identifier */},
										},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&ruleIRefExpr{index: 74 /* attr_get */},
						},
					},
					&ruleIRefExpr{index: 83 /* float */},
					&ruleIRefExpr{index: 82 /* number */},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onvalue_33,
								expr: &seqExpr{
									exprs: []any{
										&andExpr{
											expr: &seqExpr{
												exprs: []any{
													&ruleIRefExpr{index: 98 /* identifier */},
													&ruleIRefExpr{index: 126 /* spNoCR */},
												},
											},
										},
										&ruleIRefExpr{index: 47 /* detailStart */},
										&labeledExpr{
											label: "id",
											expr:  &ruleIRefExpr{index: 98 /* identifier */},
										},
										&ruleIRefExpr{index: 48 /* detailEnd */},
										&ruleIRefExpr{index: 126 /* spNoCR */},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&zeroOrOneExpr{
										expr: &ruleIRefExpr{index: 76 /* func_invoke */},
									},
									&ruleIRefExpr{index: 72 /* item_get */},
									&ruleIRefExpr{index: 74 /* attr_get */},
								},
							},
						},
					},
					&ruleIRefExpr{index: 95 /* fstring */},
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 102 /* sub */},
							&ruleIRefExpr{index: 72 /* item_get */},
							&ruleIRefExpr{index: 74 /* attr_get */},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onvalue_55,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "[", want: "\"[\""},
										&ruleIRefExpr{index: 123 /* sp */},
										&litMatcher{val: "]", want: "\"]\""},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&zeroOrOneExpr{
										expr: &ruleIRefExpr{index: 70 /* array_call */},
									},
									&ruleIRefExpr{index: 74 /* attr_get */},
								},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 79 /* value_array_range */},
							},
							&ruleIRefExpr{index: 79 /* value_array_range */},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 70 /* array_call */},
							},
							&ruleIRefExpr{index: 74 /* attr_get */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &ruleIRefExpr{index: 80 /* value_array */},
							},
							&ruleIRefExpr{index: 80 /* value_array */},
							&zeroOrOneExpr{
								expr: &ruleIRefExpr{index: 70 /* array_call */},
							},
							&ruleIRefExpr{index: 74 /* attr_get */},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onvalue_80,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "{", want: "\"{\""},
										&ruleIRefExpr{index: 123 /* sp */},
										&litMatcher{val: "}", want: "\"}\""},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 72 /* item_get */},
									&ruleIRefExpr{index: 74 /* attr_get */},
								},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onvalue_90,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "{", want: "\"{\""},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onvalue_94,
								expr: &seqExpr{
									exprs: []any{
										&ruleIRefExpr{index: 77 /* dict_item */},
										&zeroOrMoreExpr{
											expr: &seqExpr{
												exprs: []any{
													&litMatcher{val: ",", want: "\",\""},
													&ruleIRefExpr{index: 123 /* sp */},
													&ruleIRefExpr{index: 77 /* dict_item */},
												},
											},
										},
										&zeroOrOneExpr{
											expr: &litMatcher{val: ",", want: "\",\""},
										},
										&litMatcher{val: "}", want: "\"}\""},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&ruleIRefExpr{index: 72 /* item_get */},
									&ruleIRefExpr{index: 74 /* attr_get */},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "number",
			expr: &actionExpr{
				run: (*parser).call_onnumber_1,
				expr: &oneOrMoreExpr{
					expr: &charClassMatcher{
						val:    "[0-9]",
						ranges: []rune{'0', '9'},
					},
				},
			},
		},
		{
			name: "float",
			expr: &actionExpr{
				run: (*parser).call_onfloat_1,
				expr: &seqExpr{
					exprs: []any{
						&zeroOrMoreExpr{
							expr: &charClassMatcher{
								val:    "[0-9]",
								ranges: []rune{'0', '9'},
							},
						},
						&litMatcher{val: ".", want: "\".\""},
						&oneOrMoreExpr{
							expr: &charClassMatcher{
								val:    "[0-9]",
								ranges: []rune{'0', '9'},
							},
						},
					},
				},
			},
		},
		{
			name:      "strPart1",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onstrPart1_1,
				expr: &labeledExpr{
					label: "items",
					expr: &oneOrMoreExpr{
						expr: &choiceExpr{
							alternatives: []any{
								&ruleIRefExpr{index: 92 /* strEscape */},
								&ruleIRefExpr{index: 85 /* strPart1Normal */},
							},
						},
					},
				},
			},
		},
		{
			name: "strPart1Normal",
			expr: &actionExpr{
				run: (*parser).call_onstrPart1Normal_1,
				expr: &oneOrMoreExpr{
					expr: &seqExpr{
						exprs: []any{
							&andExpr{
								expr: &charClassMatcher{
									val:      "[^'\\\\]",
									chars:    []rune{'\'', '\\'},
									inverted: true,
								},
							},
							&anyMatcher{},
						},
					},
				},
			},
		},
		{
			name:      "strPart2",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onstrPart2_1,
				expr: &labeledExpr{
					label: "items",
					expr: &oneOrMoreExpr{
						expr: &choiceExpr{
							alternatives: []any{
								&ruleIRefExpr{index: 92 /* strEscape */},
								&ruleIRefExpr{index: 87 /* strPart2Normal */},
							},
						},
					},
				},
			},
		},
		{
			name: "strPart2Normal",
			expr: &actionExpr{
				run: (*parser).call_onstrPart2Normal_1,
				expr: &oneOrMoreExpr{
					expr: &seqExpr{
						exprs: []any{
							&andExpr{
								expr: &charClassMatcher{
									val:      "[^\"\\\\]",
									chars:    []rune{'"', '\\'},
									inverted: true,
								},
							},
							&anyMatcher{},
						},
					},
				},
			},
		},
		{
			name:      "strPart3",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onstrPart3_1,
				expr: &labeledExpr{
					label: "items",
					expr: &oneOrMoreExpr{
						expr: &choiceExpr{
							alternatives: []any{
								&ruleIRefExpr{index: 92 /* strEscape */},
								&ruleIRefExpr{index: 89 /* strPart3Normal */},
							},
						},
					},
				},
			},
		},
		{
			name: "strPart3Normal",
			expr: &actionExpr{
				run: (*parser).call_onstrPart3Normal_1,
				expr: &oneOrMoreExpr{
					expr: &seqExpr{
						exprs: []any{
							&andExpr{
								expr: &charClassMatcher{
									val:      "[^`\\\\{]",
									chars:    []rune{'`', '\\', '{'},
									inverted: true,
								},
							},
							&anyMatcher{},
						},
					},
				},
			},
		},
		{
			name:      "strPart4",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onstrPart4_1,
				expr: &labeledExpr{
					label: "items",
					expr: &oneOrMoreExpr{
						expr: &choiceExpr{
							alternatives: []any{
								&ruleIRefExpr{index: 92 /* strEscape */},
								&ruleIRefExpr{index: 91 /* strPart4Normal */},
							},
						},
					},
				},
			},
		},
		{
			name: "strPart4Normal",
			expr: &actionExpr{
				run: (*parser).call_onstrPart4Normal_1,
				expr: &oneOrMoreExpr{
					expr: &seqExpr{
						exprs: []any{
							&andExpr{
								expr: &charClassMatcher{
									val:      "[^\\x1e\\\\{]",
									chars:    []rune{'\x1e', '\\', '{'},
									inverted: true,
								},
							},
							&anyMatcher{},
						},
					},
				},
			},
		},
		{
			name: "strEscape",
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run:  (*parser).call_onstrEscape_2,
						expr: &litMatcher{val: "\\n", want: "\"\\\\n\""},
					},
					&actionExpr{
						run:  (*parser).call_onstrEscape_4,
						expr: &litMatcher{val: "\\r", want: "\"\\\\r\""},
					},
					&actionExpr{
						run:  (*parser).call_onstrEscape_6,
						expr: &litMatcher{val: "\\f", want: "\"\\\\f\""},
					},
					&actionExpr{
						run:  (*parser).call_onstrEscape_8,
						expr: &litMatcher{val: "\\t", want: "\"\\\\t\""},
					},
					&actionExpr{
						run:  (*parser).call_onstrEscape_10,
						expr: &litMatcher{val: "\\\\", want: "\"\\\\\\\\\""},
					},
					&actionExpr{
						run:  (*parser).call_onstrEscape_12,
						expr: &litMatcher{val: "\\'", want: "\"\\\\'\""},
					},
					&actionExpr{
						run:  (*parser).call_onstrEscape_14,
						expr: &litMatcher{val: "\\\"", want: "\"\\\\\\\"\""},
					},
					&actionExpr{
						run:  (*parser).call_onstrEscape_16,
						expr: &litMatcher{val: "\\{", want: "\"\\\\{\""},
					},
					&actionExpr{
						run:  (*parser).call_onstrEscape_18,
						expr: &litMatcher{val: "\\}", want: "\"\\\\}\""},
					},
					&actionExpr{
						run:  (*parser).call_onstrEscape_20,
						expr: &litMatcher{val: "\\", want: "\"\\\\\""},
					},
				},
			},
		},
		{
			name: "fstringStmt",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "{%", want: "\"{%\""},
					&ruleIRefExpr{index: 123 /* sp */},
					&choiceExpr{
						alternatives: []any{
							&seqExpr{
								exprs: []any{
									&codeExpr{
										run: (*parser).call_onfstringStmt_6,
									},
									&actionExpr{
										run:  (*parser).call_onfstringStmt_7,
										expr: &ruleIRefExpr{index: 2 /* stmtRoot */},
									},
								},
							},
							&andCodeExpr{run: (*parser).call_onfstringStmt_9},
						},
					},
					&ruleIRefExpr{index: 123 /* sp */},
					&litMatcher{val: "%}", want: "\"%}\""},
				},
			},
		},
		{
			name: "fstringStmt2",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "{", want: "\"{\""},
					&ruleIRefExpr{index: 123 /* sp */},
					&choiceExpr{
						alternatives: []any{
							&seqExpr{
								exprs: []any{
									&codeExpr{
										run: (*parser).call_onfstringStmt2_6,
									},
									&actionExpr{
										run:  (*parser).call_onfstringStmt2_7,
										expr: &ruleIRefExpr{index: 2 /* stmtRoot */},
									},
								},
							},
							&andCodeExpr{run: (*parser).call_onfstringStmt2_9},
						},
					},
					&ruleIRefExpr{index: 123 /* sp */},
					&litMatcher{val: "}", want: "\"}\""},
				},
			},
		},
		{
			name: "fstring",
			expr: &seqExpr{
				exprs: []any{
					&choiceExpr{
						alternatives: []any{
							&actionExpr{
								run: (*parser).call_onfstring_3,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "'", want: "\"'\""},
										&litMatcher{val: "'", want: "\"'\""},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onfstring_7,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "\x1e", want: "\"\\x1e\""},
										&litMatcher{val: "\x1e", want: "\"\\x1e\""},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onfstring_11,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "\"", want: "\"\\\"\""},
										&litMatcher{val: "\"", want: "\"\\\"\""},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onfstring_15,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "`", want: "\"`\""},
										&litMatcher{val: "`", want: "\"`\""},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&actionExpr{
										run:  (*parser).call_onfstring_20,
										expr: &litMatcher{val: "'", want: "\"'\""},
									},
									&actionExpr{
										run: (*parser).call_onfstring_22,
										expr: &seqExpr{
											exprs: []any{
												&zeroOrMoreExpr{
													expr: &ruleIRefExpr{index: 84 /* strPart1 */},
												},
												&litMatcher{val: "'", want: "\"'\""},
											},
										},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&actionExpr{
										run:  (*parser).call_onfstring_28,
										expr: &litMatcher{val: "\"", want: "\"\\\"\""},
									},
									&actionExpr{
										run: (*parser).call_onfstring_30,
										expr: &seqExpr{
											exprs: []any{
												&zeroOrMoreExpr{
													expr: &ruleIRefExpr{index: 86 /* strPart2 */},
												},
												&litMatcher{val: "\"", want: "\"\\\"\""},
											},
										},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&actionExpr{
										run:  (*parser).call_onfstring_36,
										expr: &litMatcher{val: "`", want: "\"`\""},
									},
									&actionExpr{
										run: (*parser).call_onfstring_38,
										expr: &seqExpr{
											exprs: []any{
												&zeroOrMoreExpr{
													expr: &choiceExpr{
														alternatives: []any{
															&ruleIRefExpr{index: 88 /* strPart3 */},
															&ruleIRefExpr{index: 93 /* fstringStmt */},
															&ruleIRefExpr{index: 94 /* fstringStmt2 */},
														},
													},
												},
												&litMatcher{val: "`", want: "\"`\""},
											},
										},
									},
								},
							},
							&seqExpr{
								exprs: []any{
									&actionExpr{
										run:  (*parser).call_onfstring_47,
										expr: &litMatcher{val: "\x1e", want: "\"\\x1e\""},
									},
									&actionExpr{
										run: (*parser).call_onfstring_49,
										expr: &seqExpr{
											exprs: []any{
												&zeroOrMoreExpr{
													expr: &choiceExpr{
														alternatives: []any{
															&ruleIRefExpr{index: 90 /* strPart4 */},
															&ruleIRefExpr{index: 93 /* fstringStmt */},
															&ruleIRefExpr{index: 94 /* fstringStmt2 */},
														},
													},
												},
												&litMatcher{val: "\x1e", want: "\"\\x1e\""},
											},
										},
									},
								},
							},
						},
					},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "keywords",
			expr: &choiceExpr{
				alternatives: []any{
					&litMatcher{val: "while", want: "\"while\""},
					&litMatcher{val: "if", want: "\"if\""},
					&litMatcher{val: "else", want: "\"else\""},
					&litMatcher{val: "continue", want: "\"continue\""},
					&litMatcher{val: "break", want: "\"break\""},
					&litMatcher{val: "return", want: "\"return\""},
					&litMatcher{val: "func", want: "\"func\""},
				},
			},
		},
		{
			name:        "keywords_test",
			displayName: "\"keywords\"",
			expr: &notExpr{
				expr: &seqExpr{
					exprs: []any{
						&ruleIRefExpr{index: 96 /* keywords */},
						&notExpr{
							expr: &ruleIRefExpr{index: 101 /* xidContinue */},
						},
						&andCodeExpr{run: (*parser).call_onkeywords_test_6},
					},
				},
			},
		},
		{
			name: "identifier",
			expr: &actionExpr{
				run: (*parser).call_onidentifier_1,
				expr: &seqExpr{
					exprs: []any{
						&ruleIRefExpr{index: 97 /* keywords_test */},
						&ruleIRefExpr{index: 100 /* xidStart */},
						&zeroOrMoreExpr{
							expr: &choiceExpr{
								alternatives: []any{
									&ruleIRefExpr{index: 101 /* xidContinue */},
									&litMatcher{val: ":", want: "\":\""},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "identifierWithoutColon",
			expr: &actionExpr{
				run: (*parser).call_onidentifierWithoutColon_1,
				expr: &seqExpr{
					exprs: []any{
						&ruleIRefExpr{index: 97 /* keywords_test */},
						&ruleIRefExpr{index: 100 /* xidStart */},
						&zeroOrMoreExpr{
							expr: &ruleIRefExpr{index: 101 /* xidContinue */},
						},
					},
				},
			},
		},
		{
			name: "xidStart",
			expr: &charClassMatcher{
				val:     "[_$\\p{L}\\p{Other_ID_Start}]",
				chars:   []rune{'_', '$'},
				classes: []*unicode.RangeTable{unicode.L, unicode.Other_ID_Start},
			},
		},
		{
			name: "xidContinue",
			expr: &charClassMatcher{
				val:     "[$\\p{L}\\p{Other_ID_Start}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Other_ID_Continue}（）【】]",
				chars:   []rune{'$', '（', '）', '【', '】'},
				classes: []*unicode.RangeTable{unicode.L, unicode.Other_ID_Start, unicode.Nl, unicode.Mn, unicode.Mc, unicode.Nd, unicode.Pc, unicode.Other_ID_Continue},
			},
		},
		{
			name: "sub",
			expr: &seqExpr{
				exprs: []any{
					&andExpr{
						expr: &seqExpr{
							exprs: []any{
								&ruleIRefExpr{index: 104 /* parenOpen */},
								&ruleIRefExpr{index: 26 /* exprRoot */},
								&ruleIRefExpr{index: 105 /* parenClose */},
							},
						},
					},
					&ruleIRefExpr{index: 104 /* parenOpen */},
					&ruleIRefExpr{index: 26 /* exprRoot */},
					&ruleIRefExpr{index: 105 /* parenClose */},
				},
			},
		},
		{
			name: "subX",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 102 /* sub */},
					&ruleIRefExpr{index: 72 /* item_get */},
					&ruleIRefExpr{index: 74 /* attr_get */},
				},
			},
		},
		{
			name: "parenOpen",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "(", want: "\"(\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "parenClose",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: ")", want: "\")\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "add",
			expr: &seqExpr{
				exprs: []any{
					&choiceExpr{
						alternatives: []any{
							&litMatcher{val: "+", want: "\"+\""},
							&litMatcher{val: "＋", want: "\"＋\""},
						},
					},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "minus",
			expr: &seqExpr{
				exprs: []any{
					&choiceExpr{
						alternatives: []any{
							&litMatcher{val: "-", want: "\"-\""},
							&litMatcher{val: "－", want: "\"－\""},
						},
					},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "multiply",
			expr: &seqExpr{
				exprs: []any{
					&choiceExpr{
						alternatives: []any{
							&litMatcher{val: "*", want: "\"*\""},
							&litMatcher{val: "＊", want: "\"＊\""},
						},
					},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "divide",
			expr: &seqExpr{
				exprs: []any{
					&choiceExpr{
						alternatives: []any{
							&litMatcher{val: "/", want: "\"/\""},
							&litMatcher{val: "／", want: "\"／\""},
						},
					},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "modulus",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "%", want: "\"%\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "exponentiation",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&litMatcher{val: "^", want: "\"^\""},
							&ruleIRefExpr{index: 123 /* sp */},
						},
					},
					&seqExpr{
						exprs: []any{
							&litMatcher{val: "**", want: "\"**\""},
							&ruleIRefExpr{index: 123 /* sp */},
						},
					},
				},
			},
		},
		{
			name: "nullCoalescing",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "??", want: "\"??\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "bitwiseOr",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "|", want: "\"|\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "bitwiseAnd",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "&", want: "\"&\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "logicOr",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "||", want: "\"||\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "logicAnd",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "&&", want: "\"&&\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "lt",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "<", want: "\"<\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "gt",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: ">", want: "\">\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "le",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "<=", want: "\"<=\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "ge",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: ">=", want: "\">=\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "eq",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "==", want: "\"==\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "ne",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "!=", want: "\"!=\""},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name:        "sp",
			displayName: "\"whitespace\"",
			expr: &zeroOrMoreExpr{
				expr: &charClassMatcher{
					val:   "[ \\n\\t\\r]",
					chars: []rune{' ', '\n', '\t', '\r'},
				},
			},
		},
		{
			name:        "sp1",
			displayName: "\"whitespace\"",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&charClassMatcher{
								val:   "[ \\n\\t\\r]",
								chars: []rune{' ', '\n', '\t', '\r'},
							},
							&ruleIRefExpr{index: 123 /* sp */},
						},
					},
					&notExpr{
						expr: &anyMatcher{},
					},
				},
			},
		},
		{
			name: "sp1x",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 124 /* sp1 */},
					&ruleIRefExpr{index: 123 /* sp */},
				},
			},
		},
		{
			name: "spNoCR",
			expr: &zeroOrMoreExpr{
				expr: &charClassMatcher{
					val:   "[ \\t]",
					chars: []rune{' ', '\t'},
				},
			},
		},
		{
			name: "comment",
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 126 /* spNoCR */},
					&litMatcher{val: "//", want: "\"//\""},
					&ruleIRefExpr{index: 128 /* commentLineRest */},
				},
			},
		},
		{
			name: "commentLineRest",
			expr: &seqExpr{
				exprs: []any{
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&notExpr{
									expr: &charClassMatcher{
										val:   "[\\r\\n]",
										chars: []rune{'\r', '\n'},
									},
								},
								&anyMatcher{},
							},
						},
					},
					&choiceExpr{
						alternatives: []any{
							&charClassMatcher{
								val:   "[\\r\\n]",
								chars: []rune{'\r', '\n'},
							},
							&notExpr{
								expr: &anyMatcher{},
							},
						},
					},
				},
			},
		},
		{
			name: "commentLineRest2",
			expr: &seqExpr{
				exprs: []any{
					&zeroOrMoreExpr{
						expr: &seqExpr{
							exprs: []any{
								&notExpr{
									expr: &charClassMatcher{
										val:   "[\\r\\n]",
										chars: []rune{'\r', '\n'},
									},
								},
								&anyMatcher{},
							},
						},
					},
					&charClassMatcher{
						val:   "[\\r\\n]",
						chars: []rune{'\r', '\n'},
					},
				},
			},
		},
		{
			name: "st_expr",
			expr: &choiceExpr{
				alternatives: []any{
					&ruleIRefExpr{index: 135 /* st_modify_multi_1 */},
					&ruleIRefExpr{index: 132 /* st_assign_multi */},
				},
			},
		},
		{
			name: "est",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &litMatcher{val: "(", want: "\"(\""},
							},
							&ruleIRefExpr{index: 26 /* exprRoot */},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onest_7,
								expr: &andExpr{
									expr: &ruleIRefExpr{index: 26 /* exprRoot */},
								},
							},
							&actionExpr{
								run:  (*parser).call_onest_10,
								expr: &ruleIRefExpr{index: 26 /* exprRoot */},
							},
						},
					},
				},
			},
		},
		{
			name: "st_assign_multi",
			expr: &oneOrMoreExpr{
				expr: &seqExpr{
					exprs: []any{
						&ruleIRefExpr{index: 134 /* st_assign */},
						&ruleIRefExpr{index: 123 /* sp */},
						&zeroOrOneExpr{
							expr: &litMatcher{val: ",", want: "\",\""},
						},
						&ruleIRefExpr{index: 123 /* sp */},
					},
				},
			},
		},
		{
			name: "st_star",
			expr: &seqExpr{
				exprs: []any{
					&litMatcher{val: "*", want: "\"*\""},
					&ruleIRefExpr{index: 123 /* sp */},
					&choiceExpr{
						alternatives: []any{
							&ruleIRefExpr{index: 83 /* float */},
							&ruleIRefExpr{index: 82 /* number */},
							&ruleIRefExpr{index: 102 /* sub */},
						},
					},
				},
			},
		},
		{
			name:      "st_assign",
			varExists: true,
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onst_assign_2,
						expr: &seqExpr{
							exprs: []any{
								&andExpr{
									expr: &seqExpr{
										exprs: []any{
											&ruleIRefExpr{index: 142 /* st_name2 */},
											&ruleIRefExpr{index: 123 /* sp */},
											&choiceExpr{
												alternatives: []any{
													&litMatcher{val: ":", want: "\":\""},
													&litMatcher{val: "=", want: "\"=\""},
												},
											},
											&ruleIRefExpr{index: 123 /* sp */},
											&ruleIRefExpr{index: 131 /* est */},
										},
									},
								},
								&ruleIRefExpr{index: 142 /* st_name2 */},
								&ruleIRefExpr{index: 123 /* sp */},
								&choiceExpr{
									alternatives: []any{
										&litMatcher{val: ":", want: "\":\""},
										&litMatcher{val: "=", want: "\"=\""},
									},
								},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 131 /* est */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onst_assign_20,
						expr: &seqExpr{
							exprs: []any{
								&andExpr{
									expr: &seqExpr{
										exprs: []any{
											&ruleIRefExpr{index: 140 /* st_name1 */},
											&ruleIRefExpr{index: 131 /* est */},
										},
									},
								},
								&ruleIRefExpr{index: 140 /* st_name1 */},
								&ruleIRefExpr{index: 131 /* est */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onst_assign_28,
						expr: &seqExpr{
							exprs: []any{
								&andExpr{
									expr: &seqExpr{
										exprs: []any{
											&ruleIRefExpr{index: 143 /* st_name2r */},
											&ruleIRefExpr{index: 123 /* sp */},
											&ruleIRefExpr{index: 133 /* st_star */},
											&ruleIRefExpr{index: 123 /* sp */},
											&choiceExpr{
												alternatives: []any{
													&litMatcher{val: ":", want: "\":\""},
													&litMatcher{val: "=", want: "\"=\""},
												},
											},
											&ruleIRefExpr{index: 123 /* sp */},
											&ruleIRefExpr{index: 131 /* est */},
										},
									},
								},
								&ruleIRefExpr{index: 143 /* st_name2r */},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 133 /* st_star */},
								&ruleIRefExpr{index: 123 /* sp */},
								&choiceExpr{
									alternatives: []any{
										&litMatcher{val: ":", want: "\":\""},
										&litMatcher{val: "=", want: "\"=\""},
									},
								},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 131 /* est */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onst_assign_50,
						expr: &seqExpr{
							exprs: []any{
								&andExpr{
									expr: &seqExpr{
										exprs: []any{
											&ruleIRefExpr{index: 143 /* st_name2r */},
											&ruleIRefExpr{index: 123 /* sp */},
											&litMatcher{val: "*", want: "\"*\""},
											&ruleIRefExpr{index: 123 /* sp */},
											&choiceExpr{
												alternatives: []any{
													&litMatcher{val: ":", want: "\":\""},
													&litMatcher{val: "=", want: "\"=\""},
												},
											},
											&ruleIRefExpr{index: 123 /* sp */},
											&ruleIRefExpr{index: 131 /* est */},
										},
									},
								},
								&ruleIRefExpr{index: 143 /* st_name2r */},
								&ruleIRefExpr{index: 123 /* sp */},
								&litMatcher{val: "*", want: "\"*\""},
								&ruleIRefExpr{index: 123 /* sp */},
								&choiceExpr{
									alternatives: []any{
										&litMatcher{val: ":", want: "\":\""},
										&litMatcher{val: "=", want: "\"=\""},
									},
								},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 131 /* est */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onst_assign_72,
						expr: &seqExpr{
							exprs: []any{
								&andExpr{
									expr: &seqExpr{
										exprs: []any{
											&ruleIRefExpr{index: 143 /* st_name2r */},
											&ruleIRefExpr{index: 123 /* sp */},
											&choiceExpr{
												alternatives: []any{
													&litMatcher{val: ":", want: "\":\""},
													&litMatcher{val: "=", want: "\"=\""},
												},
											},
											&ruleIRefExpr{index: 123 /* sp */},
											&ruleIRefExpr{index: 131 /* est */},
										},
									},
								},
								&ruleIRefExpr{index: 143 /* st_name2r */},
								&ruleIRefExpr{index: 123 /* sp */},
								&choiceExpr{
									alternatives: []any{
										&litMatcher{val: ":", want: "\":\""},
										&litMatcher{val: "=", want: "\"=\""},
									},
								},
								&ruleIRefExpr{index: 123 /* sp */},
								&ruleIRefExpr{index: 131 /* est */},
							},
						},
					},
					&actionExpr{
						run: (*parser).call_onst_assign_90,
						expr: &seqExpr{
							exprs: []any{
								&andExpr{
									expr: &seqExpr{
										exprs: []any{
											&ruleIRefExpr{index: 141 /* st_name1r */},
											&ruleIRefExpr{index: 131 /* est */},
										},
									},
								},
								&ruleIRefExpr{index: 141 /* st_name1r */},
								&ruleIRefExpr{index: 131 /* est */},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onst_assign_99,
								expr: &seqExpr{
									exprs: []any{
										&andExpr{
											expr: &seqExpr{
												exprs: []any{
													&litMatcher{val: "&", want: "\"&\""},
													&ruleIRefExpr{index: 142 /* st_name2 */},
													&ruleIRefExpr{index: 123 /* sp */},
													&choiceExpr{
														alternatives: []any{
															&litMatcher{val: ":", want: "\":\""},
															&litMatcher{val: "=", want: "\"=\""},
														},
													},
													&ruleIRefExpr{index: 131 /* est */},
												},
											},
										},
										&litMatcher{val: "&", want: "\"&\""},
										&ruleIRefExpr{index: 142 /* st_name2 */},
										&ruleIRefExpr{index: 123 /* sp */},
										&choiceExpr{
											alternatives: []any{
												&litMatcher{val: ":", want: "\":\""},
												&litMatcher{val: "=", want: "\"=\""},
											},
										},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onst_assign_117,
								expr: &labeledExpr{
									label:       "text",
									expr:        &ruleIRefExpr{index: 131 /* est */},
									textCapture: true,
								},
							},
						},
					},
					&seqExpr{
						exprs: []any{
							&actionExpr{
								run: (*parser).call_onst_assign_121,
								expr: &seqExpr{
									exprs: []any{
										&andExpr{
											expr: &seqExpr{
												exprs: []any{
													&litMatcher{val: "&", want: "\"&\""},
													&ruleIRefExpr{index: 143 /* st_name2r */},
													&ruleIRefExpr{index: 123 /* sp */},
													&choiceExpr{
														alternatives: []any{
															&litMatcher{val: ":", want: "\":\""},
															&litMatcher{val: "=", want: "\"=\""},
														},
													},
													&ruleIRefExpr{index: 131 /* est */},
												},
											},
										},
										&litMatcher{val: "&", want: "\"&\""},
										&ruleIRefExpr{index: 143 /* st_name2r */},
										&ruleIRefExpr{index: 123 /* sp */},
										&choiceExpr{
											alternatives: []any{
												&litMatcher{val: ":", want: "\":\""},
												&litMatcher{val: "=", want: "\"=\""},
											},
										},
										&ruleIRefExpr{index: 123 /* sp */},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onst_assign_139,
								expr: &labeledExpr{
									label:       "text",
									expr:        &ruleIRefExpr{index: 131 /* est */},
									textCapture: true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "st_modify_multi_1",
			expr: &seqExpr{
				exprs: []any{
					&seqExpr{
						exprs: []any{
							&ruleIRefExpr{index: 136 /* st_modify_lead */},
							&ruleIRefExpr{index: 123 /* sp */},
							&zeroOrOneExpr{
								expr: &litMatcher{val: ",", want: "\",\""},
							},
							&ruleIRefExpr{index: 123 /* sp */},
						},
					},
					&ruleIRefExpr{index: 137 /* st_modify_multi_rest */},
				},
			},
		},
		{
			name: "st_modify_lead",
			expr: &choiceExpr{
				alternatives: []any{
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &seqExpr{
									exprs: []any{
										&ruleIRefExpr{index: 142 /* st_name2 */},
										&ruleIRefExpr{index: 138 /* st_modify_rest1 */},
									},
								},
							},
							&ruleIRefExpr{index: 142 /* st_name2 */},
							&ruleIRefExpr{index: 138 /* st_modify_rest1 */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &seqExpr{
									exprs: []any{
										&ruleIRefExpr{index: 143 /* st_name2r */},
										&ruleIRefExpr{index: 138 /* st_modify_rest1 */},
									},
								},
							},
							&ruleIRefExpr{index: 143 /* st_name2r */},
							&ruleIRefExpr{index: 138 /* st_modify_rest1 */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &seqExpr{
									exprs: []any{
										&ruleIRefExpr{index: 140 /* st_name1 */},
										&ruleIRefExpr{index: 139 /* st_modify_rest */},
									},
								},
							},
							&ruleIRefExpr{index: 140 /* st_name1 */},
							&ruleIRefExpr{index: 139 /* st_modify_rest */},
						},
					},
					&seqExpr{
						exprs: []any{
							&andExpr{
								expr: &seqExpr{
									exprs: []any{
										&ruleIRefExpr{index: 141 /* st_name1r */},
										&ruleIRefExpr{index: 139 /* st_modify_rest */},
									},
								},
							},
							&ruleIRefExpr{index: 141 /* st_name1r */},
							&ruleIRefExpr{index: 139 /* st_modify_rest */},
						},
					},
				},
			},
		},
		{
			name: "st_modify_multi_rest",
			expr: &zeroOrMoreExpr{
				expr: &seqExpr{
					exprs: []any{
						&ruleIRefExpr{index: 136 /* st_modify_lead */},
						&ruleIRefExpr{index: 123 /* sp */},
						&zeroOrOneExpr{
							expr: &litMatcher{val: ",", want: "\",\""},
						},
						&ruleIRefExpr{index: 123 /* sp */},
					},
				},
			},
		},
		{
			name:      "st_modify_rest1",
			varExists: true,
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 123 /* sp */},
					&choiceExpr{
						alternatives: []any{
							&actionExpr{
								run: (*parser).call_onst_modify_rest1_4,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "+=", want: "\"+=\""},
										&ruleIRefExpr{index: 123 /* sp */},
										&labeledExpr{
											label:       "text",
											expr:        &ruleIRefExpr{index: 26 /* exprRoot */},
											textCapture: true,
										},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onst_modify_rest1_10,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "-=", want: "\"-=\""},
										&ruleIRefExpr{index: 123 /* sp */},
										&labeledExpr{
											label:       "text",
											expr:        &ruleIRefExpr{index: 26 /* exprRoot */},
											textCapture: true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:      "st_modify_rest",
			varExists: true,
			expr: &seqExpr{
				exprs: []any{
					&ruleIRefExpr{index: 123 /* sp */},
					&choiceExpr{
						alternatives: []any{
							&actionExpr{
								run: (*parser).call_onst_modify_rest_4,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "+", want: "\"+\""},
										&zeroOrOneExpr{
											expr: &litMatcher{val: "=", want: "\"=\""},
										},
										&ruleIRefExpr{index: 123 /* sp */},
										&labeledExpr{
											label:       "text",
											expr:        &ruleIRefExpr{index: 26 /* exprRoot */},
											textCapture: true,
										},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onst_modify_rest_12,
								expr: &seqExpr{
									exprs: []any{
										&litMatcher{val: "-=", want: "\"-=\""},
										&ruleIRefExpr{index: 123 /* sp */},
										&labeledExpr{
											label:       "text",
											expr:        &ruleIRefExpr{index: 26 /* exprRoot */},
											textCapture: true,
										},
									},
								},
							},
							&actionExpr{
								run: (*parser).call_onst_modify_rest_18,
								expr: &seqExpr{
									exprs: []any{
										&andExpr{
											expr: &litMatcher{val: "-", want: "\"-\""},
										},
										&ruleIRefExpr{index: 123 /* sp */},
										&labeledExpr{
											label:       "text",
											expr:        &ruleIRefExpr{index: 26 /* exprRoot */},
											textCapture: true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:      "st_name1",
			varExists: true,
			expr: &actionExpr{
				run: (*parser).call_onst_name1_1,
				expr: &labeledExpr{
					label: "text",
					expr: &seqExpr{
						exprs: []any{
							&oneOrMoreExpr{
								expr: &ruleIRefExpr{index: 144 /* id_ch */},
							},
							&litMatcher{val: ":", want: "\":\""},
							&oneOrMoreExpr{
								expr: &ruleIRefExpr{index: 144 /* id_ch */},
							},
						},
					},
					textCapture: true,
				},
			},
		},
		{
			name:      "st_name1r",
			varExists: true,
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onst_name1r_2,
						expr: &labeledExpr{
							label: "text",
							expr: &oneOrMoreExpr{
								expr: &ruleIRefExpr{index: 144 /* id_ch */},
							},
							textCapture: true,
						},
					},
					&actionExpr{
						run: (*parser).call_onst_name1r_6,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "'", want: "\"'\""},
								&labeledExpr{
									label: "text",
									expr: &oneOrMoreExpr{
										expr: &choiceExpr{
											alternatives: []any{
												&ruleIRefExpr{index: 144 /* id_ch */},
												&charClassMatcher{
													val:    "[0-9]",
													ranges: []rune{'0', '9'},
												},
												&litMatcher{val: " ", want: "\" \""},
												&litMatcher{val: ":", want: "\":\""},
											},
										},
									},
									textCapture: true,
								},
								&litMatcher{val: "'", want: "\"'\""},
							},
						},
					},
				},
			},
		},
		{
			name: "st_name2",
			expr: &ruleIRefExpr{index: 140 /* st_name1 */},
		},
		{
			name:      "st_name2r",
			varExists: true,
			expr: &choiceExpr{
				alternatives: []any{
					&actionExpr{
						run: (*parser).call_onst_name2r_2,
						expr: &labeledExpr{
							label: "text",
							expr: &oneOrMoreExpr{
								expr: &ruleIRefExpr{index: 144 /* id_ch */},
							},
							textCapture: true,
						},
					},
					&actionExpr{
						run: (*parser).call_onst_name2r_6,
						expr: &seqExpr{
							exprs: []any{
								&litMatcher{val: "'", want: "\"'\""},
								&labeledExpr{
									label: "text",
									expr: &oneOrMoreExpr{
										expr: &choiceExpr{
											alternatives: []any{
												&ruleIRefExpr{index: 144 /* id_ch */},
												&charClassMatcher{
													val:    "[0-9]",
													ranges: []rune{'0', '9'},
												},
												&litMatcher{val: " ", want: "\" \""},
												&litMatcher{val: ":", want: "\":\""},
											},
										},
									},
									textCapture: true,
								},
								&litMatcher{val: "'", want: "\"'\""},
							},
						},
					},
				},
			},
		},
		{
			name: "id_ch",
			expr: &ruleIRefExpr{index: 100 /* xidStart */},
		},
	},
}

func (p *parser) call_ondicescript_1() any {
	return (func(c *current) any {
		c.data.AddOp(typeHalt)
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtLines_3() bool {
	return (func(c *current) bool {
		return !c.data.Config.DisableStmts
	})(&p.cur)
}

func (p *parser) call_onflagsSwitch_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id, on any) any {
		onVal := on == "true"
		switch id.(string) {
		case "wod":
			c.data.Config.EnableDiceWoD = onVal
		case "coc":
			c.data.Config.EnableDiceCoC = onVal
		case "fate":
			c.data.Config.EnableDiceFate = onVal
		case "doublecross":
			c.data.Config.EnableDiceDoubleCross = onVal
		}
		return nil
	})(&p.cur, stack["id"], stack["on"])
}

func (p *parser) call_onstmtBreak_1() any {
	return (func(c *current) any {
		if c.data.loopLayer == 0 {
			p.addErr(errors.New("`break` is not allowed outside loop."))
			return false
		} else {
			c.data.BreakPush()
		}
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtContinue_1() any {
	return (func(c *current) any {
		if c.data.loopLayer == 0 {
			p.addErr(errors.New("`continue` is not allowed outside loop."))
			return false
		} else {
			c.data.ContinuePush()
		}
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtReturn_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeReturn)
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtReturn_7() any {
	return (func(c *current) any {
		c.data.PushNull()
		c.data.AddOp(typeReturn)
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtWhile_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeBlockPush)
		c.data.LoopBegin()
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtWhile_6() any {
	return (func(c *current) any {
		c.data.AddOp(typeJne)
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtWhile_10() any {
	return (func(c *current) any {
		c.data.AddOp(typeJmp)
		c.data.OffsetPush()
		c.data.OffsetJmpSetX(0, 2, true)
		c.data.OffsetJmpSetX(1, 1, false)
		c.data.ContinueSet(2)
		c.data.BreakSet()
		c.data.OffsetPopN(3)
		c.data.LoopEnd()
		c.data.AddOp(typeBlockPop)
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtIf_6() any {
	return (func(c *current) any {
		c.data.AddOp(typeBlockPush)
		c.data.AddOp(typeJne)
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtIf_10() any {
	return (func(c *current) any {
		c.data.AddOp(typeJmp)
		c.data.OffsetPopAndSet()
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtIf_12() any {
	return (func(c *current) any {
		c.data.OffsetPopAndSet()
		c.data.AddOp(typeBlockPop)
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtIf_15() bool {
	return (func(c *current) bool {
		p.addErr(errors.New("不符合if语法: if expr {...} [else {...}]"))
		return false
	})(&p.cur)
}

func (p *parser) call_onfunc_def_params_2() any {
	return (func(c *current) any {
		c.data.CounterPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onfunc_def_params_9() any {
	return (func(c *current) any {
		c.data.CounterPush()
		c.data.CounterAdd(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onfunc_def_params_13() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.NamePush(id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onfunc_def_params_21() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id2 any) any {
		c.data.NamePush(id2.(string))
		return nil
	})(&p.cur, stack["id2"])
}

func (p *parser) call_onfunc_def_params_28() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id2 any) any {
		c.data.CounterAdd(1)
		return nil
	})(&p.cur, stack["id2"])
}

func (p *parser) call_onstmtFunc_2() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.NamePush(id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtFunc_9() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.CodePush(p.pt.offset)
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtFunc_14() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id, exprText any) any {
		num := c.data.CounterPop()
		arr := []string{}
		for i := IntType(0); i < num; i++ {
			arr = append(arr, c.data.NamePop())
		}
		c.data.AddStoreFunction(c.data.NamePop(), arr, exprText.(string))
		return nil
	})(&p.cur, stack["id"], stack["exprText"])
}

func (p *parser) call_onstmtAssignType1_2() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.NamePush(id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtAssignType1_7() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.AddStore(c.data.NamePop())
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtAssignType2_2() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.NamePush(id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtAssignType2_8() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.CodePush(p.pt.offset)
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtAssignType2_12() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id, expr any) any {
		c.data.AddStoreComputed(c.data.NamePop(), expr.(string))
		return nil
	})(&p.cur, stack["id"], stack["expr"])
}

func (p *parser) call_onstmtAssignType3_2() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.NamePush(id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtAssignType3_8() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id, id2 any) any {
		c.data.NamePush(id2.(string))
		return nil
	})(&p.cur, stack["id"], stack["id2"])
}

func (p *parser) call_onstmtAssignType3_14() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id, id2 any) any {
		attr, objName := c.data.NamePop(), c.data.NamePop()
		c.data.AddAttrSet(objName, attr, true)
		return nil
	})(&p.cur, stack["id"], stack["id2"])
}

func (p *parser) call_onstmtAssignType4_2() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.NamePush(id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtAssignType4_11() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.AddStoreLocal(c.data.NamePop())
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtAssignType5_2() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.NamePush(id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onstmtAssignType5_7() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id, id2 any) any {
		c.data.NamePush(id2.(string))
		return nil
	})(&p.cur, stack["id"], stack["id2"])
}

func (p *parser) call_onstmtAssignType5_14() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id, id2 any) any {
		attr, objName := c.data.NamePop(), c.data.NamePop()
		c.data.AddAttrSet(objName, attr, false)
		return nil
	})(&p.cur, stack["id"], stack["id2"])
}

func (p *parser) call_onstmtAssignType6_1() any {
	return (func(c *current) any {
		c.data.AddOp(typeItemSet)
		return nil
	})(&p.cur)
}

func (p *parser) call_onstmtAssignType7_1() any {
	return (func(c *current) any {
		c.data.AddOp(typeSliceSet)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_step_7() any {
	return (func(c *current) any {
		c.data.PushNull()
		return nil
	})(&p.cur)
}

func (p *parser) call_on_step_9() any {
	return (func(c *current) any {
		c.data.PushNull()
		return nil
	})(&p.cur)
}

func (p *parser) call_on_sliceSuffix_6() any {
	return (func(c *current) any {
		c.data.PushNull()
		return nil
	})(&p.cur)
}

func (p *parser) call_on_sliceSuffix_12() any {
	return (func(c *current) any {
		c.data.PushNull()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprSliceType1_1() any {
	return (func(c *current) any {
		c.data.AddOp(typeSliceGet)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprValueIfExists_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeJne)
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprValueIfExists_8() any {
	return (func(c *current) any {
		c.data.AddOp(typeJmp)
		c.data.OffsetPopAndSet()
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprTernaryType1_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeJne)
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprTernaryType1_8() any {
	return (func(c *current) any {
		c.data.AddOp(typeJmp)
		c.data.OffsetPopAndSet()
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprTernaryType1_14() any {
	return (func(c *current) any {
		c.data.OffsetPopAndSet()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprTernaryType2_2() any {
	return (func(c *current) any {
		c.data.CounterPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprTernaryType2_6() any {
	return (func(c *current) any {
		c.data.CounterAdd(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprTernaryType2_4() any {
	return (func(c *current) any {
		c.data.PushStr("")
		limit := c.data.CounterPop() + 1
		for i := IntType(0); i < limit; i++ {
			c.data.OffsetPopAndSet()
		}
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprLogicOr_5() any {
	return (func(c *current) any {
		c.data.AddOp(typeJeDup)
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprLogicOr_9() any {
	return (func(c *current) any {
		c.data.AddOp(typeJeDup)
		c.data.OffsetPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprLogicOr_11() any {
	return (func(c *current) any {
		c.data.AddOp(typePushLast)
		c.data.OffsetPopAndSet()
		c.data.OffsetPopAndSet()
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprLogicAnd_4() any {
	return (func(c *current) any {
		c.data.AddOp(typeLogicAnd)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprBitwiseOr_3() bool {
	return (func(c *current) bool {
		return c.data.Config.DisableBitwiseOp
	})(&p.cur)
}

func (p *parser) call_onexprBitwiseOr_8() any {
	return (func(c *current) any {
		c.data.AddOp(typeBitwiseOr)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprBitwiseAnd_4() any {
	return (func(c *current) any {
		c.data.AddOp(typeBitwiseAnd)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprCompare_7() any {
	return (func(c *current) any {
		c.data.AddOp(typeCompLT)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprCompare_11() any {
	return (func(c *current) any {
		c.data.AddOp(typeCompLE)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprCompare_15() any {
	return (func(c *current) any {
		c.data.AddOp(typeCompEQ)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprCompare_19() any {
	return (func(c *current) any {
		c.data.AddOp(typeCompNE)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprCompare_23() any {
	return (func(c *current) any {
		c.data.AddOp(typeCompGE)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprCompare_27() any {
	return (func(c *current) any {
		c.data.AddOp(typeCompGT)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprAdditive_7() any {
	return (func(c *current) any {
		c.data.AddOp(typeAdd)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprAdditive_11() any {
	return (func(c *current) any {
		c.data.AddOp(typeSubtract)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprMultiplicative_7() any {
	return (func(c *current) any {
		c.data.AddOp(typeMultiply)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprMultiplicative_11() any {
	return (func(c *current) any {
		c.data.AddOp(typeDivide)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprMultiplicative_15() any {
	return (func(c *current) any {
		c.data.AddOp(typeModulus)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprNullCoalescing_4() any {
	return (func(c *current) any {
		c.data.AddOp(typeNullCoalescing)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprExp_4() any {
	return (func(c *current) any {
		c.data.AddOp(typeExponentiation)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprUnaryNeg_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeNegation)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprUnaryPos_2() any {
	return (func(c *current) any {
		c.data.AddOp(typePositive)
		return nil
	})(&p.cur)
}

func (p *parser) call_ondetailStart_1() any {
	return (func(c *current) any {
		c.data.CounterPush()
		c.data.CounterAdd(IntType(p.pt.offset))
		return nil
	})(&p.cur)
}

func (p *parser) call_ondetailEnd_1() any {
	return (func(c *current) any {
		c.data.AddDiceDetail(c.data.CounterPop(), IntType(p.pt.offset))
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceMod_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceSetKeepLowNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceMod_8() any {
	return (func(c *current) any {
		c.data.PushIntNumber("1")
		c.data.AddOp(typeDiceSetKeepLowNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceMod_12() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceSetKeepHighNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceMod_18() any {
	return (func(c *current) any {
		c.data.PushIntNumber("1")
		c.data.AddOp(typeDiceSetKeepHighNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceMod_22() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceSetDropHighNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceMod_26() any {
	return (func(c *current) any {
		c.data.PushIntNumber("1")
		c.data.AddOp(typeDiceSetDropHighNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceMod_28() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceSetDropLowNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceMod_32() any {
	return (func(c *current) any {
		c.data.PushIntNumber("1")
		c.data.AddOp(typeDiceSetDropLowNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceModType2_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceSetMin)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceModType2_6() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceSetMax)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_dicePearMod_2() any {
	return (func(c *current) any {
		c.data.PushIntNumber("2")
		c.data.AddOp(typeDiceSetTimes)
		c.data.PushIntNumber("1")
		c.data.AddOp(typeDiceSetKeepHighNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_dicePearMod_6() any {
	return (func(c *current) any {
		c.data.PushIntNumber("2")
		c.data.AddOp(typeDiceSetTimes)
		c.data.PushIntNumber("1")
		c.data.AddOp(typeDiceSetKeepLowNum)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceExpr1_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceInit)
		c.data.AddOp(typeDiceSetTimes)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceExpr2_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceInit)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceExpr3_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceInit)
		c.data.AddOp(typeDiceSetTimes)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceExpr4_2() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceInit)
		c.data.AddOp(typeDiceSetTimes)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceExprX_1() any {
	return (func(c *current) any {
		c.data.AddOp(typeDice)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_wodMain_6() any {
	return (func(c *current) any {
		c.data.AddOp(typeWodSetPoints)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_wodMain_10() any {
	return (func(c *current) any {
		c.data.AddOp(typeWodSetThreshold)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_wodMain_14() any {
	return (func(c *current) any {
		c.data.AddOp(typeWodSetThresholdQ)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceCocBonus_9() any {
	return (func(c *current) any {
		c.data.PushIntNumber("1")
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceCocBonus_1() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceCocBonus)
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceCocPenalty_9() any {
	return (func(c *current) any {
		c.data.PushIntNumber("1")
		return nil
	})(&p.cur)
}

func (p *parser) call_on_diceCocPenalty_1() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceCocPenalty)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_3() any {
	return (func(c *current) any {
		c.data.AddOp(typeDice)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_14() any {
	return (func(c *current) any {
		c.data.AddOp(typeDice)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_26() bool {
	return (func(c *current) bool {
		return !c.data.Config.DisableNDice
	})(&p.cur)
}

func (p *parser) call_onexprDice_24() any {
	return (func(c *current) any {
		c.data.AddOp(typePushDefaultExpr)
		c.data.AddOp(typeDice)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_38() bool {
	return (func(c *current) bool {
		return !c.data.Config.DisableNDice
	})(&p.cur)
}

func (p *parser) call_onexprDice_36() any {
	return (func(c *current) any {
		c.data.PushIntNumber("1")
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_42() any {
	return (func(c *current) any {
		c.data.AddOp(typePushDefaultExpr)
		c.data.AddOp(typeDice)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_49() bool {
	return (func(c *current) bool {
		return c.data.Config.EnableDiceCoC
	})(&p.cur)
}

func (p *parser) call_onexprDice_59() bool {
	return (func(c *current) bool {
		return c.data.Config.EnableDiceWoD
	})(&p.cur)
}

func (p *parser) call_onexprDice_57() any {
	return (func(c *current) any {
		c.data.AddOp(typeWodSetInit)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_67() any {
	return (func(c *current) any {
		c.data.AddOp(typeWodSetPool)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_63() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceWod)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_78() bool {
	return (func(c *current) bool {
		return c.data.Config.EnableDiceDoubleCross
	})(&p.cur)
}

func (p *parser) call_onexprDice_76() any {
	return (func(c *current) any {
		c.data.AddOp(typeDCSetInit)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_82() any {
	return (func(c *current) any {
		c.data.AddOp(typeDCSetPool)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_89() any {
	return (func(c *current) any {
		c.data.AddOp(typeDCSetPoints)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_84() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceDC)
		return nil
	})(&p.cur)
}

func (p *parser) call_onexprDice_96() bool {
	return (func(c *current) bool {
		return c.data.Config.EnableDiceFate
	})(&p.cur)
}

func (p *parser) call_onexprDice_94() any {
	return (func(c *current) any {
		c.data.AddOp(typeDiceFate)
		return nil
	})(&p.cur)
}

func (p *parser) call_onarray_call_3() any {
	return (func(c *current) any {
		c.data.WriteCode(typeAttrGet, string("kh"))
		return nil
	})(&p.cur)
}

func (p *parser) call_onarray_call_6() any {
	return (func(c *current) any {
		c.data.AddInvoke(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onarray_call_8() any {
	return (func(c *current) any {
		c.data.AddInvoke(0)
		return nil
	})(&p.cur)
}

func (p *parser) call_onarray_call_10() any {
	return (func(c *current) any {
		c.data.WriteCode(typeAttrGet, string("kl"))
		return nil
	})(&p.cur)
}

func (p *parser) call_onarray_call_13() any {
	return (func(c *current) any {
		c.data.AddInvoke(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onarray_call_15() any {
	return (func(c *current) any {
		c.data.AddInvoke(0)
		return nil
	})(&p.cur)
}

func (p *parser) call_onarray_call_17() any {
	return (func(c *current) any {
		c.data.AddOp(typeItemGet)
		return nil
	})(&p.cur)
}

func (p *parser) call_onitem_getX_3() any {
	return (func(c *current) any {
		c.data.AddOp(typeItemGet)
		return nil
	})(&p.cur)
}

func (p *parser) call_onattr_getX_4() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.WriteCode(typeAttrGet, id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onfunc_invoke2_2() any {
	return (func(c *current) any {
		c.data.CounterPush()
		c.data.CounterAdd(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onfunc_invoke2_11() any {
	return (func(c *current) any {
		c.data.CounterAdd(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onfunc_invoke2_6() any {
	return (func(c *current) any {
		c.data.AddInvoke(c.data.CounterPop())
		return nil
	})(&p.cur)
}

func (p *parser) call_onfunc_invoke_2() any {
	return (func(c *current) any {
		c.data.AddInvoke(0)
		return nil
	})(&p.cur)
}

func (p *parser) call_ondict_item_1() any {
	return (func(c *current) any {
		c.data.CounterAdd(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_id_without_colon_2() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.WriteCode(typeLoadName, string(id.(string)))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onvalue_array_range_1() any {
	return (func(c *current) any {
		c.data.AddOp(typePushRange)
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_array_2() any {
	return (func(c *current) any {
		c.data.CounterPush()
		c.data.CounterAdd(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_array_10() any {
	return (func(c *current) any {
		c.data.CounterAdd(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_array_6() any {
	return (func(c *current) any {
		c.data.PushArray(c.data.CounterPop())
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_2() any {
	return (func(c *current) any {
		c.data.PushIntNumber("1")
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_6() any {
	return (func(c *current) any {
		c.data.PushIntNumber("0")
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_10() any {
	return (func(c *current) any {
		c.data.PushNull()
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_15() any {
	return (func(c *current) any {
		c.data.PushThis()
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_23() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.WriteCode(typeLoadNameRaw, id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onvalue_33() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, id any) any {
		c.data.WriteCode(typeLoadNameWithDetail, id.(string))
		return nil
	})(&p.cur, stack["id"])
}

func (p *parser) call_onvalue_55() any {
	return (func(c *current) any {
		c.data.PushArray(0)
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_80() any {
	return (func(c *current) any {
		c.data.PushDict(0)
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_90() any {
	return (func(c *current) any {
		c.data.CounterPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onvalue_94() any {
	return (func(c *current) any {
		c.data.PushDict(c.data.CounterPop())
		return nil
	})(&p.cur)
}

func (p *parser) call_onnumber_1() any {
	return (func(c *current) any {
		c.data.PushIntNumber(toStr(c.text))
		return nil
	})(&p.cur)
}

func (p *parser) call_onfloat_1() any {
	return (func(c *current) any {
		c.data.PushFloatNumber(toStr(c.text))
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrPart1_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, items any) any {
		c.data.PushStr(stringsJoin(items))
		c.data.CounterAdd(1)
		return nil
	})(&p.cur, stack["items"])
}

func (p *parser) call_onstrPart1Normal_1() any {
	return (func(c *current) any {
		return c.text
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrPart2_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, items any) any {
		c.data.PushStr(stringsJoin(items))
		c.data.CounterAdd(1)
		return nil
	})(&p.cur, stack["items"])
}

func (p *parser) call_onstrPart2Normal_1() any {
	return (func(c *current) any {
		return c.text
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrPart3_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, items any) any {
		c.data.PushStr(stringsJoin(items))
		c.data.CounterAdd(1)
		return nil
	})(&p.cur, stack["items"])
}

func (p *parser) call_onstrPart3Normal_1() any {
	return (func(c *current) any {
		return c.text
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrPart4_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, items any) any {
		c.data.PushStr(stringsJoin(items))
		c.data.CounterAdd(1)
		return nil
	})(&p.cur, stack["items"])
}

func (p *parser) call_onstrPart4Normal_1() any {
	return (func(c *current) any {
		return c.text
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_2() any {
	return (func(c *current) any {
		return []byte("\n")
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_4() any {
	return (func(c *current) any {
		return []byte("\r")
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_6() any {
	return (func(c *current) any {
		return []byte("\f")
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_8() any {
	return (func(c *current) any {
		return []byte("\t")
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_10() any {
	return (func(c *current) any {
		return []byte("\\")
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_12() any {
	return (func(c *current) any {
		return []byte("'")
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_14() any {
	return (func(c *current) any {
		return []byte("\"")
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_16() any {
	return (func(c *current) any {
		return []byte("{")
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_18() any {
	return (func(c *current) any {
		return []byte("}")
		return nil
	})(&p.cur)
}

func (p *parser) call_onstrEscape_20() any {
	return (func(c *current) any {
		return []byte("\\")
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstringStmt_6() any {
	return (func(c *current) any {
		c.data.AddOp(typeFStringBlockPush)
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstringStmt_7() any {
	return (func(c *current) any {
		c.data.AddOp(typeFStringBlockPop)
		c.data.CounterAdd(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstringStmt_9() bool {
	return (func(c *current) bool {
		p.addErr(errors.New("{%} 内必须是语句块或表达式"))
		return false
	})(&p.cur)
}

func (p *parser) call_onfstringStmt2_6() any {
	return (func(c *current) any {
		c.data.AddOp(typeFStringBlockPush)
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstringStmt2_7() any {
	return (func(c *current) any {
		c.data.AddOp(typeFStringBlockPop)
		c.data.CounterAdd(1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstringStmt2_9() bool {
	return (func(c *current) bool {
		p.addErr(errors.New("{} 内必须是语句块或表达式"))
		return false
	})(&p.cur)
}

func (p *parser) call_onfstring_3() any {
	return (func(c *current) any {
		c.data.PushStr("")
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_7() any {
	return (func(c *current) any {
		c.data.PushStr("")
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_11() any {
	return (func(c *current) any {
		c.data.PushStr("")
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_15() any {
	return (func(c *current) any {
		c.data.PushStr("")
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_20() any {
	return (func(c *current) any {
		c.data.CounterPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_22() any {
	return (func(c *current) any {
		c.data.CounterPop()
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_28() any {
	return (func(c *current) any {
		c.data.CounterPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_30() any {
	return (func(c *current) any {
		c.data.CounterPop()
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_36() any {
	return (func(c *current) any {
		c.data.CounterPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_38() any {
	return (func(c *current) any {
		c.data.AddFormatString(c.data.CounterPop())
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_47() any {
	return (func(c *current) any {
		c.data.CounterPush()
		return nil
	})(&p.cur)
}

func (p *parser) call_onfstring_49() any {
	return (func(c *current) any {
		c.data.AddFormatString(c.data.CounterPop())
		return nil
	})(&p.cur)
}

func (p *parser) call_onkeywords_test_6() bool {
	return (func(c *current) bool {
		p.addErr(errors.New("使用关键字作为变量名"))
		return true
	})(&p.cur)
}

func (p *parser) call_onidentifier_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

func (p *parser) call_onidentifierWithoutColon_1() any {
	return (func(c *current) any {
		return toStr(c.text)
		return nil
	})(&p.cur)
}

func (p *parser) call_onest_7() any {
	return (func(c *current) any {
		c.data.FlagsPush()
		c.data.Config.DisableStmts = true
		c.data.Config.DisableNDice = true
		c.data.Config.DisableBitwiseOp = true
		return nil
	})(&p.cur)
}

func (p *parser) call_onest_10() any {
	return (func(c *current) any {
		c.data.FlagsPop()
		return nil
	})(&p.cur)
}

func (p *parser) call_onst_assign_2() any {
	return (func(c *current) any {
		c.data.AddStName()
		return nil
	})(&p.cur)
}

func (p *parser) call_onst_assign_20() any {
	return (func(c *current) any {
		c.data.AddStName()
		return nil
	})(&p.cur)
}

func (p *parser) call_onst_assign_28() any {
	return (func(c *current) any {
		c.data.AddOp(typeStX1)
		return nil
	})(&p.cur)
}

func (p *parser) call_onst_assign_50() any {
	return (func(c *current) any {
		c.data.AddOp(typeStX0)
		return nil
	})(&p.cur)
}

func (p *parser) call_onst_assign_72() any {
	return (func(c *current) any {
		c.data.AddStName()
		return nil
	})(&p.cur)
}

func (p *parser) call_onst_assign_90() any {
	return (func(c *current) any {
		c.data.AddStName()
		return nil
	})(&p.cur)
}

func (p *parser) call_onst_assign_99() any {
	return (func(c *current) any {
		c.data.CodePush(p.pt.offset)
		return nil
	})(&p.cur)
}

func (p *parser) call_onst_assign_117() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.AddStoreComputedOnStack(text.(string))
		c.data.AddStName()
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_assign_121() any {
	return (func(c *current) any {
		c.data.CodePush(p.pt.offset)
		return nil
	})(&p.cur)
}

func (p *parser) call_onst_assign_139() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.AddStoreComputedOnStack(text.(string))
		c.data.AddStName()
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_modify_rest1_4() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.AddStModify("+", text.(string))
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_modify_rest1_10() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.AddStModify("-=", text.(string))
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_modify_rest_4() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.AddStModify("+", text.(string))
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_modify_rest_12() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.AddStModify("-=", text.(string))
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_modify_rest_18() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.AddStModify("-", text.(string))
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_name1_1() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.PushStr(text.(string))
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_name1r_2() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.PushStr(text.(string))
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_name1r_6() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.PushStr(text.(string))
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_name2r_2() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.PushStr(text.(string))
		return nil
	})(&p.cur, stack["text"])
}

func (p *parser) call_onst_name2r_6() any {
	stack := p.vstack[len(p.vstack)-1]
	return (func(c *current, text any) any {
		c.data.PushStr(text.(string))
		return nil
	})(&p.cur, stack["text"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// remove generic because it can't be compiled by gopherjs
type parserStack struct {
	data  []savepoint
	index int
	size  int
}

func (ss *parserStack) init(size int) {
	ss.index = -1
	ss.data = make([]savepoint, size)
	ss.size = size
}

func (ss *parserStack) push(v *savepoint) {
	ss.index += 1
	if ss.index == ss.size {
		ss.data = append(ss.data, *v)
		ss.size = len(ss.data)
	} else {
		ss.data[ss.index] = *v
	}
}

func (ss *parserStack) pop() *savepoint {
	ref := &ss.data[ss.index]
	ss.index--
	return ref
}

func (ss *parserStack) top() *savepoint {
	return &ss.data[ss.index]
}

// option is a function that can set an option on the parser. It returns
// the previous setting as an option.
type option func(*parser) option

func memoized(b bool) option {
	return func(p *parser) option {
		old := p.memoized
		p.memoized = b
		return memoized(old)
	}
}

// Parse parses the data from b using filename as information in the
// error messages.
func parse(filename string, b []byte, opts ...option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match
	data *ParserCustomData
}

// the AST types...

// nolint: structcheck
type grammar struct {
	rules []*rule
}

// nolint: structcheck
type rule struct {
	name        string
	displayName string
	expr        any
	varExists   bool
}

// nolint: structcheck
type choiceExpr struct {
	alternatives []any
}

// nolint: structcheck
type actionExpr struct {
	expr any
	run  func(*parser) any
}

// nolint: structcheck
type recoveryExpr struct {
	expr         any
	recoverExpr  any
	failureLabel []string
}

// nolint: structcheck
type seqExpr struct {
	exprs []any
}

// nolint: structcheck
type throwExpr struct {
	label string
}

// nolint: structcheck
type labeledExpr struct {
	label       string
	expr        any
	textCapture bool
}

// nolint: structcheck
type expr struct {
	expr any
}

type (
	andExpr        expr // nolint: structcheck
	notExpr        expr // nolint: structcheck
	andLogicalExpr expr // nolint: structcheck
	notLogicalExpr expr // nolint: structcheck
	zeroOrOneExpr  expr // nolint: structcheck
	zeroOrMoreExpr expr // nolint: structcheck
	oneOrMoreExpr  expr // nolint: structcheck
)

// nolint: structcheck
type ruleRefExpr struct {
	name string
}

// nolint: structcheck
type ruleIRefExpr struct {
	index int
}

// nolint: structcheck
type andCodeExpr struct {
	run func(*parser) bool
}

// nolint: structcheck
type notCodeExpr struct {
	run func(*parser) bool
}

// nolint: structcheck
type litMatcher struct {
	val        string
	ignoreCase bool
	want       string
}

// nolint: structcheck
type codeExpr struct {
	run     func(*parser) any
	notSkip bool
}

// nolint: structcheck
type charClassMatcher struct {
	val        string
	chars      []rune
	ranges     []rune
	classes    []*unicode.RangeTable
	ignoreCase bool
	inverted   bool
}

type anyMatcher struct{} // nolint: structcheck

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// nolint: structcheck,deadcode
type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

// nolint: varcheck
const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the exprType of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The exprType of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

// nolint: structcheck,maligned
type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth    int
	recover  bool
	memoized bool

	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo1 map[int]map[any]*resultTuple
	memo2 map[int]map[any]*resultTuple

	// rules table, maps the rule identifier to the rule node
	rules      map[string]*rule
	rulesArray []*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any

	_errPos *position
	// skip code stack
	scStack []bool
	// save point stack
	spStack parserStack
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  false,
		cur: current{
			data: &ParserCustomData{},
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		memo1:           map[int]map[any]*resultTuple{},
		memo2:           map[int]map[any]*resultTuple{},
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: "dicescript",
		scStack:    []bool{false},
	}

	p.spStack.init(5)
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []option) {
	for _, opt := range opts {
		opt(p)
	}
}

// setCustomData to the parser.
func (p *parser) setCustomData(data *ParserCustomData) {
	p.cur.data = data
}

func (p *parser) checkSkipCode() bool {
	return p.scStack[len(p.scStack)-1]
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	if p._errPos != nil {
		p.addErrAt(err, *p._errPos, []string{})
	} else {
		p.addErrAt(err, p.pt.position, []string{})
	}
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos *position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = *pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt *savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = *pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start *savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFromOffset(offset int) []byte {
	return p.data[offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

// nolint: gocyclo
func (p *parser) parse(grammar *grammar) (val any, err error) {
	if grammar == nil {
		grammar = g
	}
	if len(grammar.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	p.rulesArray = grammar.rules
	p.buildRulesTable(grammar)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	var val any
	var ok bool
	if rule.varExists && !p.checkSkipCode() {
		p.pushV()
		val, ok = p.parseExprWrap(rule.expr)
		p.popV()
	} else {
		val, ok = p.parseExprWrap(rule.expr)
	}
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

// nolint: gocyclo
func (p *parser) parseExprWrap(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	skipCode := p.checkSkipCode()
	memo := p.memo1
	if skipCode {
		memo = p.memo2
	}

	setMemoized := func(pos int, expr any, val resultTuple) {
		if !p.memoized {
			return
		}
		if memo[pos] == nil {
			memo[pos] = map[any]*resultTuple{}
		}
		memo[pos][expr] = &val
	}

	if p.memoized {
		getMemoized := func(expr any) *resultTuple {
			pos := p.pt.offset
			if memo[pos] == nil {
				return nil
			}
			return memo[pos][expr]
		}

		if m := getMemoized(expr); m != nil {
			p.restore(&m.end)
			return m.v, m.b
		}
	}

	pos := p.pt.offset

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *andLogicalExpr:
		val, ok = p.parseAndLogicalExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *codeExpr:
		val, ok = p.parseCodeExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *notLogicalExpr:
		val, ok = p.parseNotLogicalExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *ruleIRefExpr:
		val, ok = p.parseRuleIRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}

	setMemoized(pos, expr, resultTuple{val, ok, p.pt})
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.checkSkipCode() {
		_, ok := p.parseExprWrap(act.expr)
		return nil, ok
	}

	p.spStack.push(&p.pt)
	val, ok := p.parseExprWrap(act.expr)
	start := p.spStack.pop()

	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		p._errPos = &start.position
		actVal := act.run(p)
		p._errPos = nil
		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	ok := and.run(p)
	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	return p.parseAndExprBase(and, false)
}

func (p *parser) parseAndLogicalExpr(and *andLogicalExpr) (any, bool) {
	return p.parseAndExprBase((*andExpr)(and), true)
}

func (p *parser) parseAndExprBase(and *andExpr, logical bool) (any, bool) {
	pt := p.pt

	p.scStack = append(p.scStack, true)
	_, ok := p.parseExprWrap(and.expr)
	p.scStack = p.scStack[:len(p.scStack)-1]

	matchedOffset := p.pt.offset
	p.restore(&pt)

	if logical {
		return nil, ok && p.pt.offset != matchedOffset
	}
	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, &p.pt.position, ".")
		return nil, false
	}
	p.failAt(true, &p.pt.position, ".")
	p.read()
	return nil, true
}

// nolint: gocyclo
func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, &p.pt.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, &p.pt.position, chr.val)
				return nil, false
			}
			p.failAt(true, &p.pt.position, chr.val)
			p.read()
			return nil, true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, &p.pt.position, chr.val)
				return nil, false
			}
			p.failAt(true, &p.pt.position, chr.val)
			p.read()
			return nil, true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, &p.pt.position, chr.val)
				return nil, false
			}
			p.failAt(true, &p.pt.position, chr.val)
			p.read()
			return nil, true
		}
	}

	if chr.inverted {
		p.failAt(true, &p.pt.position, chr.val)
		p.read()
		return nil, true
	}
	p.failAt(false, &p.pt.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		val, ok := p.parseExprWrap(alt)
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	startOffset := p.pt.position.offset
	var val any
	var ok bool
	val, ok = p.parseExprWrap(lab.expr)
	if ok && lab.label != "" && !p.checkSkipCode() {
		m := p.vstack[len(p.vstack)-1]
		if lab.textCapture {
			m[lab.label] = string(p.sliceFromOffset(startOffset))
		} else {
			m[lab.label] = val
		}
	}
	return val, ok
}

func (p *parser) parseCodeExpr(code *codeExpr) (any, bool) {
	if !code.notSkip && p.checkSkipCode() {
		return nil, true
	}
	return code.run(p), true
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, &start.position, lit.want)
			p.restore(&start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, &start.position, lit.want)
	return nil, true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok := not.run(p)
	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	return p.parseNotExprBase(not, false)
}

func (p *parser) parseNotLogicalExpr(not *notLogicalExpr) (any, bool) {
	return p.parseNotExprBase((*notExpr)(not), true)
}

func (p *parser) parseNotExprBase(not *notExpr, logical bool) (any, bool) {
	pt := p.pt
	p.maxFailInvertExpected = !p.maxFailInvertExpected

	p.scStack = append(p.scStack, true)
	_, ok := p.parseExprWrap(not.expr)
	p.scStack = p.scStack[:len(p.scStack)-1]

	p.maxFailInvertExpected = !p.maxFailInvertExpected
	matchedOffset := p.pt.offset
	p.restore(&pt)

	if logical {
		return nil, !ok && p.pt.offset != matchedOffset
	}
	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any
	var matched bool
	for {
		val, ok := p.parseExprWrap(expr.expr)
		if !ok {
			if len(vals) > 0 {
				return vals, matched
			}
			return nil, matched
		}
		matched = true
		if val != nil {
			vals = append(vals, val)
		}
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseRuleIRefExpr(ref *ruleIRefExpr) (any, bool) {
	return p.parseRuleWrap(p.rulesArray[ref.index])
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	var vals []any
	notSkipCode := p.checkSkipCode()

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(&pt)
			return nil, false
		}
		if notSkipCode && val != nil {
			vals = append(vals, val)
		}
	}
	if len(vals) > 0 {
		return vals, true
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}
	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any
	for {
		val, ok := p.parseExprWrap(expr.expr)
		if !ok {
			if len(vals) > 0 {
				return vals, true
			}
			return nil, true
		}
		if val != nil {
			vals = append(vals, val)
		}
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	val, _ := p.parseExprWrap(expr.expr)
	// whether it matched or not, consider it a match
	return val, true
}
